{"version":3,"sources":["actions/index.js","components/RenderPosts.jsx","components/Home.jsx","components/Login.jsx","components/Signup.jsx","components/Post.jsx","components/Header.jsx","components/Footer.jsx","components/AddPost.jsx","components/EditPost.jsx","App.jsx","serviceWorker.js","redusers/index.js","index.jsx"],"names":["axios","interceptors","request","use","config","token","localStorage","getItem","headers","common","Authorization","error","Promise","reject","setArticles","articles","type","payload","setLike","liked","addErrorMsg","err","setAuth","auth","setPostChangeStatusToNone","actionCreators","setSlug","slug","actions","getArticles","dispatch","a","get","response","data","getPageArticles","page","offsetVal","deleteArticle","RenderPosts","componentDidMount","props","handleLIke","evt","target","parentNode","firstChild","textContent","this","requestStatus","className","map","item","key","shortid","generate","alt","src","author","image","onClick","to","formatDistance","Date","createdAt","now","addSuffix","username","body","tagList","length","tag","color","favorited","HeartFilled","style","onChange","defaultCurrent","total","React","Component","defaultProps","connect","state","Home","authenticate","values","path","post","user","setItem","errors","Login","loginValidation","Yup","shape","email","required","password","min","matches","formik","useFormik","initialValues","validationSchema","onSubmit","touched","handleBlur","handleChange","handleSubmit","errorMsg","name","placeholder","prefix","UserOutlined","value","onBlur","Password","LockOutlined","emailOrPassword","disabled","htmlType","addUser","label","actionCreaters","getTargetArticle","endpoint","article","deletePost","options","method","url","then","status","Post","changePostStatus","title","danger","isAuth","icon","clear","Footer","MailOutlined","href","addPost","postValuesValidation","description","render","TextArea","arrayHelpers","friend","index","remove","insert","push","editPost","authenticateWithToken","App","basename","exact","component","Signup","EditPost","Boolean","window","location","hostname","match","combineReducers","action","store","createStore","rootReducer","compose","applyMiddleware","thunk","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.89719162.chunk.js","sourcesContent":["import axios from 'axios';\n\naxios.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers.common.Authorization = `Token ${token}`;\n    }\n    return config;\n  },\n  (error) => Promise.reject(error),\n);\n\nexport const setSlug = (slug) => ({\n  type: 'SET_SLUG',\n  payload: {\n    slug,\n  },\n});\n\nexport const requestSend = () => ({\n  type: 'REQUEST_SEND',\n});\n\nexport const requestSuccess = () => ({\n  type: 'REQUEST_SUCCESS',\n});\n\nexport const requestFailure = () => ({\n  type: 'REQUEST_FAILURE',\n});\n\nexport const setArticles = (articles) => ({\n  type: 'SET_ARTICLES',\n  payload: {\n    articles,\n  },\n});\n\nexport const setArticle = (article) => ({\n  type: 'SET_ARTICLE',\n  payload: {\n    article,\n  },\n});\n\nexport const deleteArticle = () => ({\n  type: 'DELETE_ARTICLE',\n});\n\nexport const getArticles = () => async (dispatch) => {\n  dispatch(requestSend());\n  try {\n    const response = await axios.get('https://conduit.productionready.io/api/articles?limit=10');\n    dispatch(setArticles(response.data.articles));\n    dispatch(requestSuccess());\n  } catch (err) {\n    dispatch(requestFailure());\n  }\n};\n\nexport const setLike = (liked) => ({\n  type: 'SET_LIKE',\n  payload: {\n    liked,\n  },\n});\n\nexport const addErrorMsg = (err) => ({\n  type: 'ADD_ERROR_MESSAGE',\n  payload: {\n    err,\n  },\n});\n\nexport const getPageArticles = (page) => async (dispatch) => {\n  dispatch(requestSend());\n  try {\n    const offsetVal = (page - 1) * 10;\n    const response = await axios.get(\n      `https://conduit.productionready.io/api/articles?limit=10&offset=${offsetVal}`,\n    );\n    dispatch(setArticles(response.data.articles));\n    dispatch(requestSuccess());\n  } catch (err) {\n    dispatch(requestFailure());\n  }\n};\n\nexport const getTargetArticle = (endpoint) => async (dispatch) => {\n  dispatch(requestSend());\n  try {\n    const response = await axios.get(`https://conduit.productionready.io/api${endpoint}`);\n    dispatch(setArticle(response.data.article));\n    dispatch(requestSuccess());\n  } catch (err) {\n    dispatch(requestFailure());\n  }\n};\n\nexport const setAuth = (auth) => ({\n  type: 'SET_AUTH',\n  payload: {\n    auth,\n  },\n});\n\nexport const authenticateWithToken = () => async (dispatch) => {\n  dispatch(requestSend());\n  try {\n    const response = await axios.get('https://conduit.productionready.io/api/user');\n    localStorage.setItem('token', response.data.user.token);\n    dispatch(requestSuccess());\n    dispatch(setAuth(false));\n  } catch (error) {\n    localStorage.clear();\n    dispatch(setAuth(true));\n    dispatch(requestFailure());\n    throw error;\n  }\n};\n\nexport const authenticate = (values, path) => async (dispatch) => {\n  dispatch(requestSend());\n  try {\n    const response = await axios.post(path, { user: values });\n    localStorage.setItem('user', response.data.user.username);\n    localStorage.setItem('token', response.data.user.token);\n    dispatch(requestSuccess());\n    await dispatch(setAuth(false));\n  } catch (error) {\n    dispatch(requestFailure());\n    dispatch(addErrorMsg(error.response.data.errors));\n  }\n};\n\nexport const postChangeRequest = () => ({\n  type: 'POST_CHANGE_REQUESTED',\n});\n\nexport const postChangeSuccess = () => ({\n  type: 'POST_CHANGE_SUCCESS',\n});\n\nexport const postChangeFailure = () => ({\n  type: 'POST_CHANGE_FAILURE',\n});\n\nexport const setPostChangeStatusToNone = () => ({\n  type: 'SET_POSTCHANGE_STATUS_TO_NONE',\n});\n\nexport const addPost = (values) => async (dispatch) => {\n  dispatch(postChangeRequest());\n  try {\n    const options = {\n      method: 'Post',\n      data: { article: values },\n      url: 'https://conduit.productionready.io/api/articles',\n    };\n    axios(options).then((response) => {\n      if (response.status === 200) {\n        return dispatch(postChangeSuccess());\n      }\n      return dispatch(postChangeFailure());\n    });\n  } catch (err) {\n    dispatch(postChangeFailure());\n  }\n};\n\nexport const editPost = (values, slug) => async (dispatch) => {\n  dispatch(postChangeRequest());\n  try {\n    const options = {\n      method: 'Put',\n      data: { article: values },\n      url: `https://conduit.productionready.io/api/articles/${slug}`,\n    };\n    axios(options).then((response) => {\n      if (response.status === 200) {\n        return dispatch(postChangeSuccess());\n      }\n      return dispatch(postChangeFailure());\n    });\n  } catch (err) {\n    dispatch(postChangeFailure());\n  }\n};\n\nexport const deletePost = (slug) => async (dispatch) => {\n  dispatch(postChangeRequest());\n  try {\n    const options = {\n      method: 'Delete',\n      url: `https://conduit.productionready.io/api/articles/${slug}`,\n    };\n    axios(options).then((response) => {\n      if (response.status === 200) {\n        return dispatch(postChangeSuccess());\n      }\n      return dispatch(postChangeFailure());\n    });\n  } catch (err) {\n    dispatch(postChangeFailure());\n  }\n};\n\nexport const addUserName = (username) => ({\n  type: 'ADD_USERNAME',\n  payload: {\n    name: username,\n  },\n});\n\nexport const addUser = (values, path) => async (dispatch) => {\n  dispatch(requestSend());\n  try {\n    const response = await axios.post(path, { user: values });\n    dispatch(addUserName(response.data.user.username));\n    localStorage.setItem('user', response.data.user.username);\n    dispatch(requestSuccess());\n    dispatch(setAuth());\n  } catch (error) {\n    dispatch(addErrorMsg(error.response.data.errors));\n    dispatch(requestFailure());\n  }\n};\n","/* eslint-disable react/forbid-prop-types */\nimport React from 'react';\nimport { Tag, Pagination, Spin } from 'antd';\nimport { HeartFilled } from '@ant-design/icons';\nimport { Link } from 'react-router-dom';\nimport { formatDistance } from 'date-fns';\nimport { connect } from 'react-redux';\nimport shortid from 'shortid';\nimport PropTypes from 'prop-types';\nimport * as actions from '../actions/index';\n\nconst mapStateToProps = (state) => ({\n  articles: state.articles,\n  requestStatus: state.requestStatus,\n  slug: state.slug,\n});\n\nconst actionCreators = {\n  setSlug: actions.setSlug,\n  setLike: actions.setLike,\n  getArticles: actions.getArticles,\n  getPageArticles: actions.getPageArticles,\n  deleteArticle: actions.deleteArticle,\n};\n\nclass RenderPosts extends React.Component {\n  componentDidMount = () => {\n    const { getArticles, deleteArticle } = this.props;\n    deleteArticle();\n    getArticles();\n  };\n\n  handleLIke = (evt) => {\n    const { setLike } = this.props;\n    const { target } = evt;\n    setLike(target.parentNode.parentNode.parentNode.parentNode.firstChild.textContent);\n  };\n\n  render() {\n    const {\n      articles, getPageArticles, setSlug, requestStatus,\n    } = this.props;\n    return (\n      <main className=\"container padding-top margin-bottom\">\n        {requestStatus === 'success' ? (\n          articles.map((item) => (\n            <div key={shortid.generate()} className=\"post-card\">\n              <img className=\"avatar\" alt=\"AVATAR\" src={`${item.author.image}`} />\n              <div className=\"card__content\">\n                <Link\n                  onClick={() => setSlug(item.slug)}\n                  to={`/articles/${item.slug}`}\n                  className=\"title\"\n                >\n                  {item.slug}\n                </Link>\n                <div className=\"meta\">\n                  <span className=\"date\">\n                    {formatDistance(new Date(item.createdAt), Date.now(), { addSuffix: true })}\n                  </span>\n                  <span className=\"author\">{item.author.username}</span>\n                </div>\n                <p>{item.body}</p>\n                <div className=\"links\">\n                  {item.tagList.length\n                    ? item.tagList.map((tag) => (\n                      <Tag key={shortid.generate()} color=\"orangered\">\n                        {tag}\n                      </Tag>\n                    ))\n                    : null}\n                  {item.favorited ? (\n                    <HeartFilled style={{ color: 'red' }} onClick={this.handleLIke} />\n                  ) : (\n                    <HeartFilled onClick={this.handleLIke} />\n                  )}\n                </div>\n              </div>\n            </div>\n          ))\n        ) : (\n          <div className=\"max-width margin-bottom\">\n            <Spin className=\"center\" />\n          </div>\n        )}\n        <div className=\"max-width\">\n          <Pagination onChange={getPageArticles} defaultCurrent=\"1\" total=\"500\" />\n        </div>\n      </main>\n    );\n  }\n}\n\nRenderPosts.propTypes = {\n  getArticles: PropTypes.func.isRequired,\n  setLike: PropTypes.func.isRequired,\n  articles: PropTypes.array,\n  getPageArticles: PropTypes.func.isRequired,\n  setSlug: PropTypes.func.isRequired,\n};\n\nRenderPosts.defaultProps = {\n  articles: null,\n};\n\nexport default connect(mapStateToProps, actionCreators)(RenderPosts);\n","import React from 'react';\nimport RenderPosts from './RenderPosts';\n\nconst Home = () => (\n  <div>\n    <RenderPosts />\n  </div>\n);\n\nexport default Home;\n","/* eslint-disable react/forbid-prop-types */\nimport React from 'react';\nimport { Input, Button, Spin } from 'antd';\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\nimport { Link, BrowserRouter as Router } from 'react-router-dom';\nimport { useFormik } from 'formik';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport * as Yup from 'yup';\nimport * as actions from '../actions/index';\n\nconst actionCreators = {\n  authenticate: actions.authenticate,\n};\n\nconst mapStateToProps = (state) => ({\n  errorMsg: state.errorMsg,\n  requestStatus: state.requestStatus,\n});\n\nconst Login = (props) => {\n  const loginValidation = Yup.object().shape({\n    email: Yup.string()\n      .email('Укожите корректный email')\n      .required('Обязательное поле'),\n    password: Yup.string()\n      .required('Вы не ввели пароль')\n      .min(8, 'Должно быть не менее 8 символов')\n      .matches(/(?=.*[0-9])/, 'Пароль должень содержать хотя бы одну цифру')\n      .matches(/(?=.*[a-z])/, 'Пароль должень содержать хотя бы одну букву латинского алфавита'),\n  });\n\n  const formik = useFormik({\n    initialValues: {\n      email: '',\n      password: '',\n    },\n    validationSchema: loginValidation,\n    onSubmit: (values) => {\n      const { authenticate } = props;\n      authenticate(values, 'https://conduit.productionready.io/api/users/login');\n    },\n  });\n\n  const {\n    errors, values, touched, handleBlur, handleChange, handleSubmit,\n  } = formik;\n\n  const { errorMsg, requestStatus } = props;\n\n  return (\n    <form className=\"form\" name=\"normal_login\" onSubmit={handleSubmit}>\n      <div className=\"margin-bottom\">\n        <Input\n          name=\"email\"\n          placeholder=\"E-mail\"\n          prefix={<UserOutlined className=\"site-form-item-icon\" />}\n          value={values.email}\n          onChange={handleChange}\n          onBlur={handleBlur}\n        />\n        {errors.email && touched.email && <div className=\"red\">{errors.email}</div>}\n      </div>\n      <div className=\"margin-bottom\">\n        <Input.Password\n          name=\"password\"\n          placeholder=\"Пароль\"\n          prefix={<LockOutlined className=\"site-form-item-icon\" />}\n          value={values.password}\n          onChange={handleChange}\n          onBlur={handleBlur}\n        />\n        {errors.password && touched.password && <div className=\"red\">{errors.password}</div>}\n      </div>\n      {errorMsg && <div className=\"red\">{errorMsg.emailOrPassword}</div>}\n      <Button\n        disabled={requestStatus === 'requested'}\n        htmlType=\"submit\"\n        className=\"margin-right\"\n        type=\"primary\"\n      >\n        Войти\n      </Button>\n      {requestStatus === 'requested' && <Spin className=\"left-margin margin-right\" />}\n      <Link to=\"/signup\">Регистрация</Link>\n    </form>\n  );\n};\n\nLogin.propTypes = {\n  authenticate: PropTypes.func.isRequired,\n  emailOrPassword: PropTypes.string,\n  requestStatus: PropTypes.string.isRequired,\n  errorMsg: PropTypes.object,\n};\n\nLogin.defaultProps = {\n  errorMsg: null,\n  emailOrPassword: '',\n};\n\nexport default connect(mapStateToProps, actionCreators)(Login);\n","import React from 'react';\nimport { useFormik } from 'formik';\nimport { Link } from 'react-router-dom';\nimport { Input, Button, Spin } from 'antd';\nimport { connect } from 'react-redux';\nimport * as actions from '../actions/index';\n\nconst actionCreators = {\n  addUser: actions.addUser,\n};\n\nconst mapStateToProps = state => ({\n  errorMsg: state.errorMsg,\n  requestStatus: state.requestStatus,\n});\n\nconst Signup = props => {\n  const formik = useFormik({\n    initialValues: {\n      username: '',\n      email: '',\n      password: '',\n    },\n    onSubmit: values => {\n      props.addUser(values, 'https://conduit.productionready.io/api/users');\n    },\n  });\n\n  const { values, handleChange, handleSubmit } = formik;\n\n  const { errorMsg, requestStatus } = props;\n\n  const renderForm = () => (\n    <form className=\"form\" onSubmit={handleSubmit}>\n      <div className=\"margin-bottom\">\n        <Input\n          name=\"email\"\n          placeholder=\"E-mail\"\n          label=\"E-mail\"\n          type=\"email\"\n          value={values.email}\n          onChange={handleChange}\n        />\n        {errorMsg && <div className=\"red\">{errorMsg.email}</div>}\n      </div>\n      <div className=\"margin-bottom\">\n        <Input.Password\n          name=\"password\"\n          placeholder=\"Пароль\"\n          label=\"Password\"\n          type=\"password\"\n          value={values.password}\n          onChange={handleChange}\n        />\n        {errorMsg && <div className=\"red\">{errorMsg.password}</div>}\n      </div>\n      <div className=\"margin-bottom\">\n        <Input\n          placeholder=\"Имя Пользователя\"\n          name=\"username\"\n          label=\"Nickname\"\n          value={values.username}\n          onChange={handleChange}\n        />\n        {errorMsg && <div className=\"red\">{errorMsg.username}</div>}\n      </div>\n      <Button className=\"left-margin\" type=\"primary\" htmlType=\"submit\">\n        Register\n      </Button>\n      {requestStatus === 'requested' && <Spin className=\"left-margin\" />}\n      <Link to=\"/login\">Войти</Link>\n    </form>\n  );\n\n  return renderForm();\n};\n\nexport default connect(mapStateToProps, actionCreators)(Signup);\n","/* eslint-disable react/forbid-prop-types */\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { formatDistance } from 'date-fns';\nimport { HeartFilled } from '@ant-design/icons';\nimport { Tag, Spin, Button } from 'antd';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport * as actions from '../actions/index';\n\nconst actionCreaters = {\n  getTargetArticle: actions.getTargetArticle,\n  setLike: actions.setLike,\n  deletePost: actions.deletePost,\n  setPostChangeStatusToNone: actions.setPostChangeStatusToNone,\n};\n\nconst mapStateToProps = (state) => ({\n  article: state.article,\n  slug: state.slug,\n  changePostStatus: state.changePostStatus,\n  requestStatus: state.requestStatus,\n});\n\nclass Post extends React.Component {\n  componentDidMount = () => {\n    const { getTargetArticle, slug } = this.props;\n    return getTargetArticle(`/articles/${slug}`);\n  };\n\n  handleLIke = () => {\n    const { setLike } = this.props;\n    setLike();\n  };\n\n  render() {\n    const {\n      article, changePostStatus, setPostChangeStatusToNone, slug, deletePost,\n    } = this.props;\n\n    if (changePostStatus === 'success') {\n      return (\n        <div className=\"container post-card padding-top\">\n          <p className=\"margin-right\">Пост успешно удолен</p>\n          <br />\n          <Link onClick={() => setPostChangeStatusToNone()} to=\"/\">\n            ok\n          </Link>\n        </div>\n      );\n    }\n    return article ? (\n      <main className=\"padding-top\">\n        <div className=\"post-card container\">\n          <img className=\"avatar\" alt=\"AVATAR\" src={`${article.author.image}`} />\n          <div className=\"card__content\">\n            <h1 className=\"title\">{article.title}</h1>\n            <div className=\"meta\">\n              <span className=\"date\">\n                {formatDistance(new Date(article.createdAt), Date.now(), { addSuffix: true })}\n              </span>\n              <span className=\"author\">{article.author.username}</span>\n            </div>\n            <p>{article.body}</p>\n            <div className=\"links\">\n              {article.tagList.length\n                ? article.tagList.map((tag) => <Tag color=\"orangered\">{tag}</Tag>)\n                : null}\n              {article.favorited ? (\n                <HeartFilled style={{ color: 'red' }} onClick={this.handleLIke} className=\"like\" />\n              ) : (\n                <HeartFilled onClick={this.handleLIke} className=\"like\" />\n              )}\n            </div>\n            {article.author.username === localStorage.getItem('user') && (\n              <div className=\"remove\">\n                <Button\n                  className=\"margin-right\"\n                  disabled={changePostStatus === 'sended'}\n                  onClick={() => deletePost(slug)}\n                  type=\"primary\"\n                  danger\n                >\n                  Удолить\n                </Button>\n                {changePostStatus === 'sended' && <Spin className=\"margin-right\" />}\n                <Button\n                  disabled={changePostStatus === 'sended'}\n                  type=\"primary\"\n                >\n                  <Link to={`/articles/${slug}/edit`}>Изменить</Link>\n                </Button>\n                {changePostStatus === 'sended' && <Spin className=\"margin-right\" />}\n              </div>\n            )}\n          </div>\n        </div>\n      </main>\n    ) : (\n      <div className=\"padding-top max-width margin-bottom\">\n        <Spin className=\"center\" />\n      </div>\n    );\n  }\n}\n\nPost.propTypes = {\n  article: PropTypes.object.isRequired,\n  changePostStatus: PropTypes.func.isRequired,\n  setPostChangeStatusToNone: PropTypes.func.isRequired,\n  slug: PropTypes.string.isRequired,\n  deletePost: PropTypes.func.isRequired,\n  getTargetArticle: PropTypes.func.isRequired,\n  setLike: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, actionCreaters)(Post);\n","import React from 'react';\nimport { Avatar } from 'antd';\nimport { Link } from 'react-router-dom';\nimport { UserOutlined } from '@ant-design/icons';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport * as actions from '../actions/index';\n\nconst mapStateToProps = (state) => ({\n  isAuth: state.isAuth,\n});\n\nconst actionCreators = {\n  setAuth: actions.setAuth,\n};\n\nconst Header = (props) => {\n  const handleAuth = () => {\n    const { setAuth, isAuth } = props;\n    setAuth(isAuth);\n    localStorage.clear();\n  };\n\n  const { isAuth } = props;\n\n  return (\n    <header>\n      <div className=\"header__wrapper\">\n        <Link to=\"/\">\n          <h1 className=\"logo\">Blog</h1>\n        </Link>\n        <div className=\"user\">\n          {isAuth && (\n            <Link className=\"user-btn margin-right\" to=\"/add\">\n              Добавить пост\n            </Link>\n          )}\n          <div className=\"user-name\">\n            <Avatar icon={<UserOutlined />} />\n            {isAuth ? (\n              <span className=\"user-nick\">{localStorage.getItem('user')}</span>\n            ) : (\n              <span className=\"user-nick\">Вы не авторизованы</span>\n            )}\n          </div>\n          {isAuth ? (\n            <Link onClick={handleAuth} className=\"user-btn\" to=\"/\">\n              Выйти\n            </Link>\n          ) : (\n            <Link className=\"user-btn\" to=\"/login\">\n              Войти\n            </Link>\n          )}\n        </div>\n      </div>\n    </header>\n  );\n};\n\nHeader.propTypes = {\n  setAuth: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, actionCreators)(Header);\n","import React from 'react';\nimport { MailOutlined } from '@ant-design/icons';\n\nconst Footer = () => (\n  <div className=\"footer\">\n    <p>Desined by Istamal Dagalaev</p>\n    <MailOutlined className=\"m-right-gap\" />\n    <a href=\"mailto:dagalaev@gmail.com\">dagalaev@gmail.com</a>\n  </div>\n);\n\nexport default Footer;\n","import React from 'react';\nimport { Formik, Form, FieldArray, Field } from 'formik';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { Input, Button, Spin } from 'antd';\nimport { connect } from 'react-redux';\nimport * as Yup from 'yup';\nimport shortid from 'shortid';\nimport * as actions from '../actions/index';\n\nconst mapStateToProps = state => ({\n  changePostStatus: state.changePostStatus,\n});\n\nconst actionCreators = {\n  addPost: actions.addPost,\n  setPostChangeStatusToNone: actions.setPostChangeStatusToNone,\n};\n\nconst AddPost = props => {\n  const postValuesValidation = Yup.object().shape({\n    title: Yup.string()\n      .required('Обязательное поле')\n      .min(3, 'Не менее 3 символов'),\n    description: Yup.string()\n      .required('Обязательное поле')\n      .min(10, 'Не менее 10 символов'),\n    body: Yup.string()\n      .required('Обязательное поле')\n      .min(20, 'Не менее 20 символов'),\n  });\n\n  const { changePostStatus, setPostChangeStatusToNone, addPost } = props;\n\n  return changePostStatus === 'success' ? (\n    <main className=\"container post-card padding-top\">\n      <p className=\"margin-right\">Пост успешно добавлен</p>\n      <br />\n      <Link onClick={() => setPostChangeStatusToNone()} to=\"/\">\n        ok\n      </Link>\n    </main>\n  ) : (\n    <Formik\n      initialValues={{\n        title: '',\n        description: '',\n        body: '',\n        tagList: [],\n      }}\n      validationSchema={postValuesValidation}\n      onSubmit={values => {\n        addPost(values);\n      }}\n      render={({ values, handleChange, errors, handleBlur, touched }) => (\n        <Form className=\"form\">\n          <div className=\"margin-bottom\">\n            <Input\n              placeholder=\"Заголовок\"\n              name=\"title\"\n              value={values.title}\n              onChange={handleChange}\n              onBlur={handleBlur}\n            />\n            {errors.title && touched.title && <div className=\"red s-size\">{errors.title}</div>}\n          </div>\n          <div className=\"margin-bottom\">\n            <Input\n              placeholder=\"Описание\"\n              name=\"description\"\n              value={values.description}\n              onChange={handleChange}\n              onBlur={handleBlur}\n            />\n            {errors.description && touched.description && (\n              <div className=\"red s-size\">{errors.description}</div>\n            )}\n          </div>\n          <div className=\"margin-bottom\">\n            <Input.TextArea\n              placeholder=\"Текст\"\n              name=\"body\"\n              value={values.body}\n              onChange={handleChange}\n              onBlur={handleBlur}\n            />\n            {errors.body && touched.body && <div className=\"red s-size\">{errors.body}</div>}\n          </div>\n          <div className=\"margin-bottom\">\n            <FieldArray\n              placeholder=\"Метки\"\n              name=\"tagList\"\n              render={arrayHelpers => (\n                <div>\n                  {values.tagList && values.tagList.length > 0 ? (\n                    values.tagList.map((friend, index) => (\n                      <div key={shortid.generate()}>\n                        <Field\n                          className=\"input margin-bottom m-right-gap\"\n                          name={`tagList.${index}`}\n                        />\n                        <Button\n                          type=\"button\"\n                          className=\"m-right-gap\"\n                          danger\n                          onClick={() => arrayHelpers.remove(index)}\n                        >\n                          -\n                        </Button>\n                        <Button type=\"button\" onClick={() => arrayHelpers.insert(index, '')}>\n                          +\n                        </Button>\n                      </div>\n                    ))\n                  ) : (\n                    <Button\n                      className=\"margin-bottom\"\n                      type=\"primary\"\n                      onClick={() => arrayHelpers.push('')}\n                    >\n                      Add a friend\n                    </Button>\n                  )}\n                  <div>\n                    <Button\n                      className=\"margin-right\"\n                      disabled={changePostStatus === 'sended'}\n                      type=\"primary\"\n                      htmlType=\"submit\"\n                    >\n                      Submit\n                    </Button>\n                    {changePostStatus === 'sended' && <Spin className=\"margin-right\" />}\n                  </div>\n                </div>\n              )}\n            />\n          </div>\n        </Form>\n      )}\n    />\n  );\n};\n\nAddPost.propTypes = {\n  changePostStatus: PropTypes.func.isRequired,\n  setPostChangeStatusToNone: PropTypes.func.isRequired,\n  addPost: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, actionCreators)(AddPost);\n","import React from 'react';\nimport {\n  Formik, Form, FieldArray, Field,\n} from 'formik';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { Input, Button, Spin } from 'antd';\nimport { connect } from 'react-redux';\nimport * as Yup from 'yup';\nimport shortid from 'shortid';\nimport * as actions from '../actions/index';\n\nconst mapStateToProps = (state) => ({\n  changePostStatus: state.changePostStatus,\n  article: state.article,\n  slug: state.slug,\n});\n\nconst actionCreators = {\n  editPost: actions.editPost,\n  setPostChangeStatusToNone: actions.setPostChangeStatusToNone,\n};\n\nconst EditPost = (props) => {\n  const postValuesValidation = Yup.object().shape({\n    title: Yup.string()\n      .required('Обязательное поле')\n      .min(3, 'Не менее 3 символов'),\n    description: Yup.string()\n      .required('Обязательное поле')\n      .min(10, 'Не менее 10 символов'),\n    body: Yup.string()\n      .required('Обязательное поле')\n      .min(20, 'Не менее 20 символов'),\n  });\n\n  const {\n    changePostStatus, setPostChangeStatusToNone, editPost, article, slug,\n  } = props;\n\n  return changePostStatus === 'success' ? (\n    <main className=\"container post-card padding-top\">\n      <p className=\"margin-right\">Изменения добавлены</p>\n      <br />\n      <Link onClick={() => setPostChangeStatusToNone()} to=\"/\">\n        ok\n      </Link>\n    </main>\n  ) : (\n    <Formik\n      initialValues={{\n        title: article.title,\n        description: article.description,\n        body: article.body,\n        tagList: [...article.tagList],\n      }}\n      validationSchema={postValuesValidation}\n      onSubmit={(values) => {\n        editPost(values, slug);\n      }}\n      render={({\n        values, handleChange, errors, handleBlur, touched,\n      }) => (\n        <Form className=\"form\">\n          <div className=\"margin-bottom\">\n            <Input\n              placeholder=\"Заголовок\"\n              name=\"title\"\n              value={values.title}\n              onChange={handleChange}\n              onBlur={handleBlur}\n            />\n            {errors.title && touched.title && <div className=\"red s-size\">{errors.title}</div>}\n          </div>\n          <div className=\"margin-bottom\">\n            <Input\n              placeholder=\"Описание\"\n              name=\"description\"\n              value={values.description}\n              onChange={handleChange}\n              onBlur={handleBlur}\n            />\n            {errors.description && touched.description && (\n            <div className=\"red s-size\">{errors.description}</div>\n            )}\n          </div>\n          <div className=\"margin-bottom\">\n            <Input.TextArea\n              placeholder=\"Текст\"\n              name=\"body\"\n              value={values.body}\n              onChange={handleChange}\n              onBlur={handleBlur}\n            />\n            {errors.body && touched.body && <div className=\"red s-size\">{errors.body}</div>}\n          </div>\n          <div className=\"margin-bottom\">\n            <FieldArray\n              placeholder=\"Метки\"\n              name=\"tagList\"\n              render={(arrayHelpers) => (\n                <div>\n                  {values.tagList && values.tagList.length > 0 ? (\n                    values.tagList.map((friend, index) => (\n                      <div key={shortid.generate()}>\n                        <Field\n                          className=\"input margin-bottom m-right-gap\"\n                          name={`tagList.${index}`}\n                        />\n                        <Button\n                          type=\"button\"\n                          className=\"m-right-gap\"\n                          danger\n                          onClick={() => arrayHelpers.remove(index)}\n                        >\n                          -\n                        </Button>\n                        <Button type=\"button\" onClick={() => arrayHelpers.insert(index, '')}>\n                          +\n                        </Button>\n                      </div>\n                    ))\n                  ) : (\n                    <Button\n                      className=\"margin-bottom\"\n                      type=\"primary\"\n                      onClick={() => arrayHelpers.push('')}\n                    >\n                      Add a friend\n                    </Button>\n                  )}\n                  <div>\n                    <Button\n                      className=\"margin-right\"\n                      disabled={changePostStatus === 'sended'}\n                      type=\"primary\"\n                      htmlType=\"submit\"\n                    >\n                      Submit\n                    </Button>\n                    {changePostStatus === 'sended' && <Spin className=\"margin-right\" />}\n                  </div>\n                </div>\n              )}\n            />\n          </div>\n        </Form>\n      )}\n    />\n  );\n};\n\nEditPost.propTypes = {\n  changePostStatus: PropTypes.func.isRequired,\n  setPostChangeStatusToNone: PropTypes.func.isRequired,\n  addPost: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, actionCreators)(EditPost);\n","import React from 'react';\nimport './App.scss';\nimport 'antd/dist/antd.css';\nimport { connect } from 'react-redux';\nimport {\n  BrowserRouter as Router, Route, Switch, Redirect,\n} from 'react-router-dom';\n\nimport PropTypes from 'prop-types';\nimport Home from './components/Home';\nimport Login from './components/Login';\nimport Signup from './components/Signup';\nimport Post from './components/Post';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport AddPost from './components/AddPost';\nimport * as actions from './actions/index';\nimport EditPost from './components/EditPost';\n\nconst mapStateToProps = (state) => ({\n  isAuth: state.isAuth,\n  slug: state.slug,\n});\n\nconst actionCreators = {\n  authenticateWithToken: actions.authenticateWithToken,\n};\n\nclass App extends React.Component {\n  componentDidMount = () => {\n    const { authenticateWithToken } = this.props;\n    if (localStorage.getItem('token')) {\n      authenticateWithToken();\n    }\n  }\n\n  render() {\n    const { slug, isAuth } = this.props;\n    return (\n      <div className=\"wrapper\">\n        <Router basename=\"/blog\">\n          <Header />\n          <Switch>\n            <Route exact path=\"/\" component={Home} />\n            <Route exact path={`/articles/${slug}`} component={Post} />\n            <Route path=\"/signup\" component={Signup} />\n            <Route path=\"/login\" render={() => (isAuth ? <Redirect to=\"/\" /> : <Login />)} />\n            <Route\n              path=\"/add\"\n              render={\n                () => (\n                  isAuth\n                    ? <AddPost />\n                    : <Redirect to=\"/Login\" />\n                )\n              }\n            />\n            <Route path={`/articles/${slug}/edit`} component={EditPost} />\n          </Switch>\n          <Footer />\n        </Router>\n      </div>\n    );\n  }\n}\n\nApp.propTypes = {\n  slug: PropTypes.string,\n  isAuth: PropTypes.bool.isRequired,\n};\n\nApp.defaultProps = {\n  slug: null,\n};\n\nexport default connect(mapStateToProps, actionCreators)(App);\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { combineReducers } from 'redux';\n\nconst requestStatus = (state = 'none', action) => {\n  switch (action.type) {\n    case 'REQUEST_SEND':\n      return 'requested';\n    case 'REQUEST_SUCCESS':\n      return 'success';\n    case 'REQUEST_FAILURE':\n      return 'failure';\n    default:\n      return state;\n  }\n};\n\nconst article = (state = null, action) => {\n  if (action.type === 'SET_ARTICLE') {\n    return action.payload.article;\n  }\n  if (action.type === 'DELETE_ARTICLE') {\n    return null;\n  }\n  return state;\n};\n\nconst slug = (state = null, action) => {\n  if (action.type === 'SET_SLUG') {\n    return action.payload.slug;\n  }\n  return state;\n};\n\nconst changePostStatus = (state = 'none', action) => {\n  if (action.type === 'POST_CHANGE_REQUESTED') {\n    return 'sended';\n  }\n  if (action.type === 'POST_CHANGE_SUCCESS') {\n    return 'success';\n  }\n  if (action.type === 'POST_CHANGE_FAILURE') {\n    return 'failure';\n  }\n  if (action.type === 'SET_POSTCHANGE_STATUS_TO_NONE') {\n    return 'none';\n  }\n  return state;\n};\n\nconst isAuth = (state = false, action) => {\n  if (action.type === 'SET_AUTH') {\n    return !action.payload.auth;\n  }\n  return state;\n};\n\nconst articles = (state = [], action) => {\n  if (action.type === 'SET_ARTICLES') {\n    return action.payload.articles;\n  }\n  if (action.type === 'SET_LIKE') {\n    return state.map((item) => {\n      if (item.slug === action.payload.liked) {\n        return { ...item, favorited: !item.favorited };\n      }\n      return item;\n    });\n  }\n  return state;\n};\n\nconst errorMsg = (state = null, action) => {\n  if (action.type === 'ADD_ERROR_MESSAGE') {\n    const { email, username, password } = action.payload.err;\n    return {\n      email,\n      username,\n      password,\n      emailOrPassword: 'Email or password is invalid',\n    };\n  }\n  return state;\n};\n\nexport default combineReducers({\n  requestStatus,\n  articles,\n  article,\n  errorMsg,\n  isAuth,\n  slug,\n  changePostStatus,\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport { createStore, compose, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport rootReducer from './redusers/index';\n\n// eslint-disable-next-line no-underscore-dangle\n// const devTools = window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__();\n\nconst store = createStore(\n  rootReducer,\n  compose(\n    applyMiddleware(thunk),\n  ),\n);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}