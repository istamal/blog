{"version":3,"sources":["actions/index.js","components/RenderPosts.jsx","components/Home.jsx","components/Login.jsx","components/Signup.jsx","components/Post.jsx","components/Header.jsx","components/Footer.jsx","components/AddPost.jsx","App.jsx","serviceWorker.js","redusers/index.js","index.jsx"],"names":["setArticles","articles","type","payload","setLike","liked","addErrorMsg","err","setAuth","setPostChangeStatusToNone","actionCreators","setSlug","slug","actions","getArticles","dispatch","a","axios","get","response","data","getPageArticles","page","offsetVal","RenderPosts","componentDidMount","props","handleLIke","evt","target","parentNode","firstChild","textContent","this","className","map","item","key","shortid","generate","alt","src","author","image","onClick","to","formatDistance","Date","createdAt","now","addSuffix","username","body","tagList","length","tag","color","favorited","HeartFilled","style","onChange","defaultCurrent","total","React","Component","defaultProps","connect","state","Home","authenticate","values","path","post","user","localStorage","setItem","token","errors","errorMsg","requestStatus","loginValidation","Yup","shape","email","required","password","min","matches","formik","useFormik","initialValues","validationSchema","onSubmit","history","then","replace","touched","handleBlur","handleChange","handleSubmit","name","placeholder","prefix","UserOutlined","value","onBlur","Password","LockOutlined","emailOrPassword","disabled","htmlType","addUser","label","actionCreaters","getTargetArticle","endpoint","article","deletePost","getItem","options","headers","Authorization","method","url","status","Post","window","location","pathname","changePostStatus","title","danger","deleteArticle","Header","icon","clear","isAuth","Footer","MailOutlined","href","addPost","postValuesValidation","description","render","TextArea","arrayHelpers","friend","index","remove","insert","push","App","exact","component","Signup","AddPost","Boolean","hostname","match","combineReducers","action","devTools","__REDUX_DEVTOOLS_EXTENSION__","store","createStore","rootReducer","compose","applyMiddleware","thunk","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.07dc963c.chunk.js","sourcesContent":["import axios from 'axios';\n\nexport const setSlug = slug => ({\n  type: 'SET_SLUG',\n  payload: {\n    slug,\n  },\n});\n\nexport const requestSend = () => ({\n  type: 'REQUEST_SEND',\n});\n\nexport const requestSuccess = () => ({\n  type: 'REQUEST_SUCCESS',\n});\n\nexport const requestFailure = () => ({\n  type: 'REQUEST_FAILURE',\n});\n\nexport const setArticles = articles => ({\n  type: 'SET_ARTICLES',\n  payload: {\n    articles,\n  },\n});\n\nexport const setArticle = article => ({\n  type: 'SET_ARTICLE',\n  payload: {\n    article,\n  },\n});\n\nexport const deleteArticle = () => ({\n  type: 'DELETE_ARTICLE',\n});\n\nexport const getArticles = () => async dispatch => {\n  dispatch(requestSend());\n  try {\n    const response = await axios.get('https://conduit.productionready.io/api/articles?limit=10');\n    dispatch(setArticles(response.data.articles));\n    dispatch(requestSuccess());\n  } catch (err) {\n    dispatch(requestFailure());\n  }\n};\n\nexport const setLike = liked => ({\n  type: 'SET_LIKE',\n  payload: {\n    liked,\n  },\n});\n\nexport const addErrorMsg = err => ({\n  type: 'ADD_ERROR_MESSAGE',\n  payload: {\n    err,\n  },\n});\n\nexport const getPageArticles = page => async dispatch => {\n  dispatch(requestSend());\n  try {\n    const offsetVal = (page - 1) * 10;\n    const response = await axios.get(\n      `https://conduit.productionready.io/api/articles?limit=10&offset=${offsetVal}`,\n    );\n    dispatch(setArticles(response.data.articles));\n    dispatch(requestSuccess());\n  } catch (err) {\n    dispatch(requestFailure());\n  }\n};\n\nexport const getTargetArticle = endpoint => async dispatch => {\n  dispatch(requestSend());\n  try {\n    const response = await axios.get(`https://conduit.productionready.io/api${endpoint}`);\n    dispatch(setArticle(response.data.article));\n    dispatch(requestSuccess());\n  } catch (err) {\n    dispatch(requestFailure());\n  }\n};\n\nexport const setAuth = () => ({\n  type: 'SET_AUTH',\n});\n\nexport const authenticate = (values, path) => async dispatch => {\n  dispatch(requestSend());\n  try {\n    const response = await axios.post(path, { user: values });\n    localStorage.setItem('user', response.data.user.username);\n    localStorage.setItem('token', response.data.user.token);\n    dispatch(requestSuccess());\n    await dispatch(setAuth());\n  } catch (error) {\n    dispatch(requestFailure());\n    dispatch(addErrorMsg(error.response.data.errors));\n  }\n};\n\nexport const postChangeRequest = () => ({\n  type: 'POST_CHANGE_REQUESTED',\n});\n\nexport const postChangeSuccess = () => ({\n  type: 'POST_CHANGE_SUCCESS',\n});\n\nexport const postChangeFailure = () => ({\n  type: 'POST_CHANGE_FAILURE',\n});\n\nexport const setPostChangeStatusToNone = () => ({\n  type: 'SET_POSTCHANGE_STATUS_TO_NONE',\n});\n\nexport const addPost = values => async dispatch => {\n  dispatch(postChangeRequest());\n  try {\n    const token = localStorage.getItem('token');\n    const options = {\n      headers: { Authorization: `Token ${token}` },\n      method: 'Post',\n      data: { article: values },\n      url: 'https://conduit.productionready.io/api/articles',\n    };\n    axios(options).then(response => {\n      if (response.status === 200) {\n        return dispatch(postChangeSuccess());\n      }\n      return dispatch(postChangeFailure());\n    });\n  } catch (err) {\n    dispatch(postChangeFailure());\n  }\n};\n\nexport const deletePost = slug => async dispatch => {\n  dispatch(postChangeRequest());\n  try {\n    const token = localStorage.getItem('token');\n    const options = {\n      headers: { Authorization: `Token ${token}` },\n      method: 'Delete',\n      url: `https://conduit.productionready.io/api/articles/${slug}`,\n    };\n    axios(options).then(response => {\n      if (response.status === 200) {\n        return dispatch(postChangeSuccess());\n      }\n      return dispatch(postChangeFailure());\n    });\n  } catch (err) {\n    dispatch(postChangeFailure());\n  }\n};\n\nexport const addUserName = username => ({\n  type: 'ADD_USERNAME',\n  payload: {\n    name: username,\n  },\n});\n\nexport const addUser = (values, path) => async dispatch => {\n  dispatch(requestSend());\n  try {\n    const response = await axios.post(path, { user: values });\n    dispatch(addUserName(response.data.user.username));\n    localStorage.setItem('user', response.data.user.username);\n    dispatch(requestSuccess());\n    dispatch(setAuth());\n  } catch (error) {\n    dispatch(addErrorMsg(error.response.data.errors));\n    dispatch(requestFailure());\n  }\n};\n","/* eslint-disable react/forbid-prop-types */\nimport React from 'react';\nimport { Tag, Pagination, Spin } from 'antd';\nimport { HeartFilled } from '@ant-design/icons';\nimport { Link } from 'react-router-dom';\nimport { formatDistance } from 'date-fns';\nimport { connect } from 'react-redux';\nimport shortid from 'shortid';\nimport PropTypes from 'prop-types';\nimport * as actions from '../actions/index';\n\nconst mapStateToProps = state => ({\n  articles: state.articles,\n  slug: state.slug,\n});\n\nconst actionCreators = {\n  setSlug: actions.setSlug,\n  setLike: actions.setLike,\n  getArticles: actions.getArticles,\n  getPageArticles: actions.getPageArticles,\n};\n\nclass RenderPosts extends React.Component {\n  componentDidMount = () => {\n    const { getArticles } = this.props;\n    getArticles();\n  };\n\n  handleLIke = evt => {\n    const { setLike } = this.props;\n    const { target } = evt;\n    setLike(target.parentNode.parentNode.parentNode.parentNode.firstChild.textContent);\n  };\n\n  render() {\n    const { articles, getPageArticles, setSlug } = this.props;\n    return (\n      <main className=\"container padding-top margin-bottom\">\n        {articles[0] ? (\n          articles.map(item => (\n            <div key={shortid.generate()} className=\"post-card\">\n              <img className=\"avatar\" alt=\"AVATAR\" src={`${item.author.image}`} />\n              <div className=\"card__content\">\n                <Link\n                  onClick={() => setSlug(item.slug)}\n                  to={`/articles/${item.slug}`}\n                  className=\"title\"\n                >\n                  {item.slug}\n                </Link>\n                <div className=\"meta\">\n                  <span className=\"date\">\n                    {formatDistance(new Date(item.createdAt), Date.now(), { addSuffix: true })}\n                  </span>\n                  <span className=\"author\">{item.author.username}</span>\n                </div>\n                <p>{item.body}</p>\n                <div className=\"links\">\n                  {item.tagList.length\n                    ? item.tagList.map(tag => (\n                        <Tag key={shortid.generate()} color=\"orangered\">\n                          {tag}\n                        </Tag>\n                      ))\n                    : null}\n                  {item.favorited ? (\n                    <HeartFilled style={{ color: 'red' }} onClick={this.handleLIke} />\n                  ) : (\n                    <HeartFilled onClick={this.handleLIke} />\n                  )}\n                </div>\n              </div>\n            </div>\n          ))\n        ) : (\n          <div className=\"max-width margin-bottom\">\n            <Spin className=\"center\" />\n          </div>\n        )}\n        <div className=\"max-width\">\n          <Pagination onChange={getPageArticles} defaultCurrent=\"1\" total=\"500\" />\n        </div>\n      </main>\n    );\n  }\n}\n\nRenderPosts.propTypes = {\n  getArticles: PropTypes.func.isRequired,\n  setLike: PropTypes.func.isRequired,\n  articles: PropTypes.array,\n  getPageArticles: PropTypes.func.isRequired,\n  setSlug: PropTypes.func.isRequired,\n};\n\nRenderPosts.defaultProps = {\n  articles: null,\n};\n\nexport default connect(mapStateToProps, actionCreators)(RenderPosts);\n","import React from 'react';\nimport RenderPosts from './RenderPosts';\n\nconst Home = () => (\n  <div>\n    <RenderPosts />\n  </div>\n);\n\nexport default Home;\n","/* eslint-disable react/forbid-prop-types */\nimport React from 'react';\nimport { Input, Button, Spin } from 'antd';\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\nimport { Link } from 'react-router-dom';\nimport { useFormik } from 'formik';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport * as Yup from 'yup';\nimport * as actions from '../actions/index';\n\nconst actionCreators = {\n  authenticate: actions.authenticate,\n};\n\nconst mapStateToProps = state => ({\n  errorMsg: state.errorMsg,\n  requestStatus: state.requestStatus,\n});\n\nconst Login = props => {\n  const loginValidation = Yup.object().shape({\n    email: Yup.string()\n      .email('Укожите корректный email')\n      .required('Обязательное поле'),\n    password: Yup.string()\n      .required('Вы не ввели пароль')\n      .min(8, 'Должно быть не менее 8 символов')\n      .matches(/(?=.*[0-9])/, 'Пароль должень содержать хотя бы одну цифру')\n      .matches(/(?=.*[a-z])/, 'Пароль должень содержать хотя бы одну букву латинского алфавита'),\n  });\n\n  const formik = useFormik({\n    initialValues: {\n      email: '',\n      password: '',\n    },\n    validationSchema: loginValidation,\n    onSubmit: values => {\n      const { authenticate, history } = props;\n      authenticate(values, 'https://conduit.productionready.io/api/users/login').then(() =>\n        history.replace('/'),\n      );\n    },\n  });\n\n  const { errors, values, touched, handleBlur, handleChange, handleSubmit } = formik;\n\n  const { errorMsg, requestStatus } = props;\n\n  return (\n    <form className=\"form\" name=\"normal_login\" onSubmit={handleSubmit}>\n      <div className=\"margin-bottom\">\n        <Input\n          name=\"email\"\n          placeholder=\"E-mail\"\n          prefix={<UserOutlined className=\"site-form-item-icon\" />}\n          value={values.email}\n          onChange={handleChange}\n          onBlur={handleBlur}\n        />\n        {errors.email && touched.email && <div className=\"red\">{errors.email}</div>}\n      </div>\n      <div className=\"margin-bottom\">\n        <Input.Password\n          name=\"password\"\n          placeholder=\"Пароль\"\n          prefix={<LockOutlined className=\"site-form-item-icon\" />}\n          value={values.password}\n          onChange={handleChange}\n          onBlur={handleBlur}\n        />\n        {errors.password && touched.password && <div className=\"red\">{errors.password}</div>}\n      </div>\n      {errorMsg && <div className=\"red\">{errorMsg.emailOrPassword}</div>}\n      <Button\n        disabled={requestStatus === 'requested'}\n        htmlType=\"submit\"\n        className=\"margin-right\"\n        type=\"primary\"\n      >\n        Войти\n      </Button>\n      {requestStatus === 'requested' && <Spin className=\"left-margin margin-right\" />}\n      <Link to=\"/signup\">Регистрация</Link>\n    </form>\n  );\n};\n\nLogin.propTypes = {\n  authenticate: PropTypes.func.isRequired,\n  history: PropTypes.object.isRequired,\n  emailOrPassword: PropTypes.string.isRequired,\n  requestStatus: PropTypes.string.isRequired,\n  errorMsg: PropTypes.object.isRequired,\n};\n\nexport default connect(mapStateToProps, actionCreators)(Login);\n","import React from 'react';\nimport { useFormik } from 'formik';\nimport { Link } from 'react-router-dom';\nimport { Input, Button, Spin } from 'antd';\nimport { connect } from 'react-redux';\nimport * as actions from '../actions/index';\n\nconst actionCreators = {\n  addUser: actions.addUser,\n};\n\nconst mapStateToProps = state => ({\n  errorMsg: state.errorMsg,\n  requestStatus: state.requestStatus,\n});\n\nconst Signup = props => {\n  const formik = useFormik({\n    initialValues: {\n      username: '',\n      email: '',\n      password: '',\n    },\n    onSubmit: values => {\n      props.addUser(values, 'https://conduit.productionready.io/api/users');\n    },\n  });\n\n  const { values, handleChange, handleSubmit } = formik;\n\n  const { errorMsg, requestStatus } = props;\n\n  const renderForm = () => (\n    <form className=\"form\" onSubmit={handleSubmit}>\n      <div className=\"margin-bottom\">\n        <Input\n          name=\"email\"\n          placeholder=\"E-mail\"\n          label=\"E-mail\"\n          type=\"email\"\n          value={values.email}\n          onChange={handleChange}\n        />\n        {errorMsg && <div className=\"red\">{errorMsg.email}</div>}\n      </div>\n      <div className=\"margin-bottom\">\n        <Input.Password\n          name=\"password\"\n          placeholder=\"Пароль\"\n          label=\"Password\"\n          type=\"password\"\n          value={values.password}\n          onChange={handleChange}\n        />\n        {errorMsg && <div className=\"red\">{errorMsg.password}</div>}\n      </div>\n      <div className=\"margin-bottom\">\n        <Input\n          placeholder=\"Имя Пользователя\"\n          name=\"username\"\n          label=\"Nickname\"\n          value={values.username}\n          onChange={handleChange}\n        />\n        {errorMsg && <div className=\"red\">{errorMsg.username}</div>}\n      </div>\n      <Button className=\"left-margin\" type=\"primary\" htmlType=\"submit\">\n        Register\n      </Button>\n      {requestStatus === 'requested' && <Spin className=\"left-margin\" />}\n      <Link to=\"/login\">Войти</Link>\n    </form>\n  );\n\n  return renderForm();\n};\n\nexport default connect(mapStateToProps, actionCreators)(Signup);\n","/* eslint-disable react/forbid-prop-types */\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { formatDistance } from 'date-fns';\nimport { HeartFilled } from '@ant-design/icons';\nimport { Tag, Spin, Button } from 'antd';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport * as actions from '../actions/index';\n\nconst actionCreaters = {\n  getTargetArticle: actions.getTargetArticle,\n  setLike: actions.setLike,\n  deletePost: actions.deletePost,\n  setPostChangeStatusToNone: actions.setPostChangeStatusToNone,\n};\n\nconst mapStateToProps = state => ({\n  article: state.article,\n  slug: state.slug,\n  changePostStatus: state.changePostStatus,\n  requestStatus: state.requestStatus,\n});\n\nclass Post extends React.Component {\n  componentDidMount = () => {\n    const { getTargetArticle } = this.props;\n    return getTargetArticle(window.location.pathname);\n  };\n\n  handleLIke = () => {\n    const { setLike } = this.props;\n    setLike();\n  };\n\n  render() {\n    const { article, changePostStatus, setPostChangeStatusToNone, slug, deletePost } = this.props;\n\n    if (changePostStatus === 'success') {\n      return (\n        <div className=\"container post-card padding-top\">\n          <p className=\"margin-right\">Пост успешно удолен</p>\n          <br />\n          <Link onClick={() => setPostChangeStatusToNone()} to=\"/\">\n            ok\n          </Link>\n        </div>\n      );\n    }\n    return article ? (\n      <main className=\"padding-top\">\n        <div className=\"post-card container\">\n          <img className=\"avatar\" alt=\"AVATAR\" src={`${article.author.image}`} />\n          <div className=\"card__content\">\n            <h1 className=\"title\">{article.title}</h1>\n            <div className=\"meta\">\n              <span className=\"date\">\n                {formatDistance(new Date(article.createdAt), Date.now(), { addSuffix: true })}\n              </span>\n              <span className=\"author\">{article.author.username}</span>\n            </div>\n            <p>{article.body}</p>\n            <div className=\"links\">\n              {article.tagList.length\n                ? article.tagList.map(tag => <Tag color=\"orangered\">{tag}</Tag>)\n                : null}\n              {article.favorited ? (\n                <HeartFilled style={{ color: 'red' }} onClick={this.handleLIke} className=\"like\" />\n              ) : (\n                <HeartFilled onClick={this.handleLIke} className=\"like\" />\n              )}\n            </div>\n            {article.author.username === localStorage.getItem('user') && (\n              <div className=\"remove\">\n                <Button\n                  className=\"margin-right\"\n                  disabled={changePostStatus === 'sended'}\n                  onClick={() => deletePost(slug)}\n                  type=\"primary\"\n                  danger\n                >\n                  Удолить\n                </Button>\n                {changePostStatus === 'sended' && <Spin className=\"margin-right\" />}\n              </div>\n            )}\n          </div>\n        </div>\n      </main>\n    ) : (\n      <div className=\"padding-top max-width margin-bottom\">\n        <Spin className=\"center\" />\n      </div>\n    );\n  }\n}\n\nPost.propTypes = {\n  article: PropTypes.object.isRequired,\n  changePostStatus: PropTypes.func.isRequired,\n  setPostChangeStatusToNone: PropTypes.func.isRequired,\n  slug: PropTypes.string.isRequired,\n  deletePost: PropTypes.func.isRequired,\n  getTargetArticle: PropTypes.func.isRequired,\n  setLike: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, actionCreaters)(Post);\n","import React from 'react';\nimport { Avatar } from 'antd';\nimport { Link } from 'react-router-dom';\nimport { UserOutlined } from '@ant-design/icons';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport * as actions from '../actions/index';\n\nconst mapStateToProps = state => ({\n  isAuth: state.isAuth,\n});\n\nconst actionCreators = {\n  setAuth: actions.setAuth,\n  deleteArticle: actions.deleteArticle,\n};\n\nconst Header = props => {\n  const handleAuth = () => {\n    const { setAuth } = props;\n    setAuth();\n    localStorage.clear();\n  };\n\n  const { deleteArticle } = props;\n\n  return (\n    <header>\n      <div className=\"header__wrapper container\">\n        <Link onClick={() => deleteArticle()} to=\"/\">\n          <h1 className=\"logo\">Blog</h1>\n        </Link>\n        <div className=\"user\">\n          {localStorage.getItem('user') && (\n            <Link className=\"user-btn margin-right\" to=\"/add\">\n              Добавить пост\n            </Link>\n          )}\n          <div className=\"user-name\">\n            <Avatar icon={<UserOutlined />} />\n            {localStorage.getItem('user') ? (\n              <span className=\"user-nick\">{localStorage.getItem('user')}</span>\n            ) : (\n              <span className=\"user-nick\">Вы не авторизованы</span>\n            )}\n          </div>\n          {localStorage.getItem('user') ? (\n            <Link onClick={handleAuth} className=\"user-btn\" to=\"/\">\n              Выйти\n            </Link>\n          ) : (\n            <Link className=\"user-btn\" to=\"/login\">\n              Войти\n            </Link>\n          )}\n        </div>\n      </div>\n    </header>\n  );\n};\n\nHeader.propTypes = {\n  setAuth: PropTypes.func.isRequired,\n  deleteArticle: PropTypes.func,\n};\n\nHeader.defaultProps = {\n  deleteArticle: null,\n};\n\nexport default connect(mapStateToProps, actionCreators)(Header);\n","import React from 'react';\nimport { MailOutlined } from '@ant-design/icons';\n\nconst Footer = () => (\n  <div className=\"footer\">\n    <p>Desined by Istamal Dagalaev</p>\n    <MailOutlined className=\"m-right-gap\" />\n    <a href=\"mailto:dagalaev@gmail.com\">dagalaev@gmail.com</a>\n  </div>\n);\n\nexport default Footer;\n","import React from 'react';\nimport { Formik, Form, FieldArray, Field } from 'formik';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { Input, Button, Spin } from 'antd';\nimport { connect } from 'react-redux';\nimport * as Yup from 'yup';\nimport shortid from 'shortid';\nimport * as actions from '../actions/index';\n\nconst mapStateToProps = state => ({\n  changePostStatus: state.changePostStatus,\n});\n\nconst actionCreators = {\n  addPost: actions.addPost,\n  setPostChangeStatusToNone: actions.setPostChangeStatusToNone,\n};\n\nconst AddPost = props => {\n  const postValuesValidation = Yup.object().shape({\n    title: Yup.string()\n      .required('Обязательное поле')\n      .min(3, 'Не менее 3 символов'),\n    description: Yup.string()\n      .required('Обязательное поле')\n      .min(10, 'Не менее 10 символов'),\n    body: Yup.string()\n      .required('Обязательное поле')\n      .min(20, 'Не менее 20 символов'),\n  });\n\n  const { changePostStatus, setPostChangeStatusToNone, addPost } = props;\n\n  return changePostStatus === 'success' ? (\n    <main className=\"container post-card padding-top\">\n      <p className=\"margin-right\">Пост успешно добавлен</p>\n      <br />\n      <Link onClick={() => setPostChangeStatusToNone()} to=\"/\">\n        ok\n      </Link>\n    </main>\n  ) : (\n    <Formik\n      initialValues={{\n        title: '',\n        description: '',\n        body: '',\n        tagList: [],\n      }}\n      validationSchema={postValuesValidation}\n      onSubmit={values => {\n        addPost(values);\n      }}\n      render={({ values, handleChange, errors, handleBlur, touched }) => (\n        <Form className=\"form\">\n          <div className=\"margin-bottom\">\n            <Input\n              placeholder=\"Заголовок\"\n              name=\"title\"\n              value={values.title}\n              onChange={handleChange}\n              onBlur={handleBlur}\n            />\n            {errors.title && touched.title && <div className=\"red s-size\">{errors.title}</div>}\n          </div>\n          <div className=\"margin-bottom\">\n            <Input\n              placeholder=\"Описание\"\n              name=\"description\"\n              value={values.description}\n              onChange={handleChange}\n              onBlur={handleBlur}\n            />\n            {errors.description && touched.description && (\n              <div className=\"red s-size\">{errors.description}</div>\n            )}\n          </div>\n          <div className=\"margin-bottom\">\n            <Input.TextArea\n              placeholder=\"Текст\"\n              name=\"body\"\n              value={values.body}\n              onChange={handleChange}\n              onBlur={handleBlur}\n            />\n            {errors.body && touched.body && <div className=\"red s-size\">{errors.body}</div>}\n          </div>\n          <div className=\"margin-bottom\">\n            <FieldArray\n              placeholder=\"Метки\"\n              name=\"tagList\"\n              render={arrayHelpers => (\n                <div>\n                  {values.tagList && values.tagList.length > 0 ? (\n                    values.tagList.map((friend, index) => (\n                      <div key={shortid.generate()}>\n                        <Field\n                          className=\"input margin-bottom m-right-gap\"\n                          name={`tagList.${index}`}\n                        />\n                        <Button\n                          type=\"button\"\n                          className=\"m-right-gap\"\n                          danger\n                          onClick={() => arrayHelpers.remove(index)}\n                        >\n                          -\n                        </Button>\n                        <Button type=\"button\" onClick={() => arrayHelpers.insert(index, '')}>\n                          +\n                        </Button>\n                      </div>\n                    ))\n                  ) : (\n                    <Button\n                      className=\"margin-bottom\"\n                      type=\"primary\"\n                      onClick={() => arrayHelpers.push('')}\n                    >\n                      Add a friend\n                    </Button>\n                  )}\n                  <div>\n                    <Button\n                      className=\"margin-right\"\n                      disabled={changePostStatus === 'sended'}\n                      type=\"primary\"\n                      htmlType=\"submit\"\n                    >\n                      Submit\n                    </Button>\n                    {changePostStatus === 'sended' && <Spin className=\"margin-right\" />}\n                  </div>\n                </div>\n              )}\n            />\n          </div>\n        </Form>\n      )}\n    />\n  );\n};\n\nAddPost.propTypes = {\n  changePostStatus: PropTypes.func.isRequired,\n  setPostChangeStatusToNone: PropTypes.func.isRequired,\n  addPost: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, actionCreators)(AddPost);\n","import React from 'react';\nimport './App.scss';\nimport 'antd/dist/antd.css';\nimport { connect } from 'react-redux';\nimport { BrowserRouter as Router, Route, Switch, Redirect } from 'react-router-dom';\n\nimport PropTypes from 'prop-types';\nimport Home from './components/Home';\nimport Login from './components/Login';\nimport Signup from './components/Signup';\nimport Post from './components/Post';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport AddPost from './components/AddPost';\n\nconst mapStateToProps = state => ({\n  isAuth: state.isAuth,\n  slug: state.slug,\n});\n\nfunction App(props) {\n  const { slug } = props;\n  return (\n    <div className=\"wrapper\">\n      <Router>\n        <Header />\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route path={`/articles/${slug}`} component={Post} />\n          <Route path=\"/signup\" component={Signup} />\n          <Route path=\"/login\" render={() => (props.isAuth ? <Redirect to=\"/\" /> : <Login />)} />\n          <Route path=\"/add\" component={AddPost} />\n        </Switch>\n        <Footer />\n      </Router>\n    </div>\n  );\n}\n\nApp.propTypes = {\n  slug: PropTypes.string,\n  isAuth: PropTypes.bool.isRequired,\n};\n\nApp.defaultProps = {\n  slug: null,\n};\n\nexport default connect(mapStateToProps)(App);\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { combineReducers } from 'redux';\n\nconst requestStatus = (state = 'none', action) => {\n  switch (action.type) {\n    case 'REQUEST_SEND':\n      return 'requested';\n    case 'REQUEST_SUCCESS':\n      return 'success';\n    case 'REQUEST_FAILURE':\n      return 'failure';\n    default:\n      return state;\n  }\n};\n\nconst article = (state = null, action) => {\n  if (action.type === 'SET_ARTICLE') {\n    return action.payload.article;\n  }\n  if (action.type === 'DELETE_ARTICLE') {\n    return null;\n  }\n  return state;\n};\n\nconst slug = (state = null, action) => {\n  if (action.type === 'SET_SLUG') {\n    return action.payload.slug;\n  }\n  return state;\n};\n\nconst changePostStatus = (state = 'none', action) => {\n  if (action.type === 'POST_CHANGE_REQUESTED') {\n    return 'sended';\n  }\n  if (action.type === 'POST_CHANGE_SUCCESS') {\n    return 'success';\n  }\n  if (action.type === 'POST_CHANGE_FAILURE') {\n    return 'failure';\n  }\n  if (action.type === 'SET_POSTCHANGE_STATUS_TO_NONE') {\n    return 'none';\n  }\n  return state;\n};\n\nconst isAuth = (state = false, action) => {\n  if (action.type === 'SET_AUTH') {\n    return !state;\n  }\n  return state;\n};\n\nconst articles = (state = [], action) => {\n  if (action.type === 'SET_ARTICLES') {\n    return action.payload.articles;\n  }\n  if (action.type === 'SET_LIKE') {\n    return state.map(item => {\n      if (item.slug === action.payload.liked) {\n        return { ...item, favorited: !item.favorited };\n      }\n      return item;\n    });\n  }\n  return state;\n};\n\nconst errorMsg = (state = null, action) => {\n  if (action.type === 'ADD_ERROR_MESSAGE') {\n    const { email, username, password } = action.payload.err;\n    return {\n      email,\n      username,\n      password,\n      emailOrPassword: 'Email or password is invalid',\n    };\n  }\n  return state;\n};\n\nexport default combineReducers({\n  requestStatus,\n  articles,\n  article,\n  errorMsg,\n  isAuth,\n  slug,\n  changePostStatus,\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport { createStore, compose, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport rootReducer from './redusers/index';\n\n// eslint-disable-next-line no-underscore-dangle\nconst devTools = window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__();\n\nconst store = createStore(\n  rootReducer,\n  compose(\n    applyMiddleware(thunk),\n    // Почему если удолить devTools кнопка войти работает только после перезагрузки?\n    devTools,\n  ),\n);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}