{"version":3,"sources":["actions/index.js","components/AnimatedHeart.jsx","components/RenderPosts.jsx","components/Login.jsx","components/Signup.jsx","components/Post.jsx","components/Header.jsx","components/Footer.jsx","components/AddPost.jsx","components/EditPost.jsx","App.jsx","serviceWorker.js","redusers/index.js","index.jsx"],"names":["axios","interceptors","request","use","config","token","localStorage","getItem","headers","common","Authorization","error","Promise","reject","setArticles","articles","type","payload","addErrorMsg","err","setAuth","auth","setPostChangeStatusToNone","fatchFavorite","slug","dispatch","a","post","response","article","data","console","log","unFavorite","delete","connect","state","favoriteRequestsStatus","HeartFilled","style","color","className","actionCreators","setSlug","setLike","liked","getArticles","get","getPageArticles","page","offsetVal","deleteArticle","actions","filterByTag","tag","RenderPosts","props","handleLike","evt","title","target","closest","firstChild","textContent","setState","componentDidMount","this","requestStatus","map","item","key","shortid","generate","alt","src","author","image","onClick","to","formatDistance","Date","createdAt","now","addSuffix","username","body","tagList","length","favoritesCount","favorited","onChange","defaultCurrent","total","React","Component","defaultProps","authenticate","values","path","user","setItem","errors","Login","loginValidation","Yup","shape","email","required","password","min","matches","formik","useFormik","initialValues","validationSchema","onSubmit","touched","handleBlur","handleChange","handleSubmit","errorMsg","name","placeholder","prefix","UserOutlined","value","onBlur","Password","LockOutlined","emailOrPassword","disabled","htmlType","addUser","label","actionCreaters","getTargetArticle","endpoint","deletePost","options","method","url","then","status","Post","changePostStatus","danger","isAuth","icon","clear","Footer","MailOutlined","href","addPost","postValuesValidation","description","render","TextArea","arrayHelpers","index","Math","random","remove","insert","push","editPost","EditPost","authenticateWithToken","App","basename","exact","component","Signup","Boolean","window","location","hostname","match","combineReducers","action","filter","includes","store","createStore","rootReducer","compose","applyMiddleware","thunk","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.d8c96191.chunk.js","sourcesContent":["import axios from 'axios';\n\naxios.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers.common.Authorization = `Token ${token}`;\n    }\n    return config;\n  },\n  (error) => Promise.reject(error),\n);\n\nexport const setSlug = (slug) => ({\n  type: 'SET_SLUG',\n  payload: {\n    slug,\n  },\n});\n\nexport const requestSend = () => ({\n  type: 'REQUEST_SEND',\n});\n\nexport const requestSuccess = () => ({\n  type: 'REQUEST_SUCCESS',\n});\n\nexport const requestFailure = () => ({\n  type: 'REQUEST_FAILURE',\n});\n\nexport const setArticles = (articles) => ({\n  type: 'SET_ARTICLES',\n  payload: {\n    articles,\n  },\n});\n\nexport const setArticle = (article) => ({\n  type: 'SET_ARTICLE',\n  payload: {\n    article,\n  },\n});\n\nexport const deleteArticle = () => ({\n  type: 'DELETE_ARTICLE',\n});\n\nexport const getArticles = () => async (dispatch) => {\n  dispatch(requestSend());\n  try {\n    const response = await axios.get('https://conduit.productionready.io/api/articles?limit=10');\n    dispatch(setArticles(response.data.articles));\n    dispatch(requestSuccess());\n  } catch (err) {\n    dispatch(requestFailure());\n  }\n};\n\nexport const setFilteredArticles = (tag) => ({\n  type: 'SET_FILTERED_ARTICLES',\n  payload: {\n    tag,\n  },\n});\n\nexport const filterByTag = (tag) => async (dispatch) => {\n  dispatch(requestSend());\n  try {\n    const response = await axios.get(`https://conduit.productionready.io/api/articles?limit=10&tag=${tag}`);\n    dispatch(setArticles(response.data.articles));\n    dispatch(requestSuccess());\n  } catch (err) {\n    dispatch(requestFailure());\n  }\n};\n\nexport const setLike = (liked) => ({\n  type: 'SET_LIKE',\n  payload: {\n    liked,\n  },\n});\n\nexport const addErrorMsg = (err) => ({\n  type: 'ADD_ERROR_MESSAGE',\n  payload: {\n    err,\n  },\n});\n\nexport const getPageArticles = (page) => async (dispatch) => {\n  dispatch(requestSend());\n  try {\n    const offsetVal = (page - 1) * 10;\n    const response = await axios.get(\n      `https://conduit.productionready.io/api/articles?limit=10&offset=${offsetVal}`,\n    );\n    dispatch(setArticles(response.data.articles));\n    dispatch(requestSuccess());\n  } catch (err) {\n    dispatch(requestFailure());\n  }\n};\n\nexport const getTargetArticle = (endpoint) => async (dispatch) => {\n  dispatch(requestSend());\n  try {\n    const response = await axios.get(`https://conduit.productionready.io/api${endpoint}`);\n    dispatch(setArticle(response.data.article));\n    dispatch(requestSuccess());\n  } catch (err) {\n    dispatch(requestFailure());\n  }\n};\n\nexport const setAuth = (auth) => ({\n  type: 'SET_AUTH',\n  payload: {\n    auth,\n  },\n});\n\nexport const authenticateWithToken = () => async (dispatch) => {\n  dispatch(requestSend());\n  try {\n    const response = await axios.get('https://conduit.productionready.io/api/user');\n    localStorage.setItem('token', response.data.user.token);\n    dispatch(requestSuccess());\n    dispatch(setAuth(false));\n  } catch (error) {\n    localStorage.clear();\n    dispatch(setAuth(true));\n    dispatch(requestFailure());\n    throw error;\n  }\n};\n\nexport const authenticate = (values, path) => async (dispatch) => {\n  dispatch(requestSend());\n  try {\n    const response = await axios.post(path, { user: values });\n    localStorage.setItem('user', response.data.user.username);\n    localStorage.setItem('token', response.data.user.token);\n    dispatch(requestSuccess());\n    await dispatch(setAuth(false));\n  } catch (error) {\n    dispatch(requestFailure());\n    dispatch(addErrorMsg(error.response.data.errors));\n  }\n};\n\nexport const postChangeRequest = () => ({\n  type: 'POST_CHANGE_REQUESTED',\n});\n\nexport const postChangeSuccess = () => ({\n  type: 'POST_CHANGE_SUCCESS',\n});\n\nexport const postChangeFailure = () => ({\n  type: 'POST_CHANGE_FAILURE',\n});\n\nexport const setPostChangeStatusToNone = () => ({\n  type: 'SET_POSTCHANGE_STATUS_TO_NONE',\n});\n\nexport const addPost = (values) => async (dispatch) => {\n  dispatch(postChangeRequest());\n  try {\n    const options = {\n      method: 'Post',\n      data: { article: values },\n      url: 'https://conduit.productionready.io/api/articles',\n    };\n    axios(options).then((response) => {\n      if (response.status === 200) {\n        return dispatch(postChangeSuccess());\n      }\n      return dispatch(postChangeFailure());\n    });\n  } catch (err) {\n    dispatch(postChangeFailure());\n  }\n};\n\nexport const editPost = (values, slug) => async (dispatch) => {\n  dispatch(postChangeRequest());\n  try {\n    const options = {\n      method: 'Put',\n      data: { article: values },\n      url: `https://conduit.productionready.io/api/articles/${slug}`,\n    };\n    axios(options).then((response) => {\n      if (response.status === 200) {\n        return dispatch(postChangeSuccess());\n      }\n      return dispatch(postChangeFailure());\n    });\n  } catch (err) {\n    dispatch(postChangeFailure());\n  }\n};\n\nexport const deletePost = (slug) => async (dispatch) => {\n  dispatch(postChangeRequest());\n  try {\n    const options = {\n      method: 'Delete',\n      url: `https://conduit.productionready.io/api/articles/${slug}`,\n    };\n    axios(options).then((response) => {\n      if (response.status === 200) {\n        return dispatch(postChangeSuccess());\n      }\n      return dispatch(postChangeFailure());\n    });\n  } catch (err) {\n    dispatch(postChangeFailure());\n  }\n};\n\nexport const addUserName = (username) => ({\n  type: 'ADD_USERNAME',\n  payload: {\n    name: username,\n  },\n});\n\nexport const addUser = (values, path) => async (dispatch) => {\n  dispatch(requestSend());\n  try {\n    const response = await axios.post(path, { user: values });\n    dispatch(addUserName(response.data.user.username));\n    localStorage.setItem('user', response.data.user.username);\n    dispatch(requestSuccess());\n    dispatch(setAuth());\n  } catch (error) {\n    dispatch(addErrorMsg(error.response.data.errors));\n    dispatch(requestFailure());\n  }\n};\n\nexport const setFavorited = (article) => ({\n  type: 'SET_FAVORITED',\n  payload: {\n    article,\n  },\n});\n\nexport const deleteFavorited = (article) => ({\n  type: 'DELETE_FAVORITED',\n  payload: {\n    article,\n  },\n});\n\nexport const requestFavorite = () => ({\n  type: 'FAVORITE_REQUESTED',\n});\n\nexport const favoriteSuccess = () => ({\n  type: 'FAVORITE_SUCCESS',\n});\n\nexport const favoriteFailure = () => ({\n  type: 'FAVORITE_FAILURE',\n});\n\nexport const fatchFavorite = (slug) => async (dispatch) => {\n  dispatch(requestFavorite());\n  try {\n    const response = await axios.post(`https://conduit.productionready.io/api/articles/${slug}/favorite`);\n    dispatch(setFavorited(response.data.article));\n    dispatch(favoriteSuccess());\n  } catch (err) {\n    console.log(err);\n    dispatch(favoriteFailure());\n  }\n};\n\nexport const unFavorite = (slug) => async (dispatch) => {\n  dispatch(requestFavorite());\n  try {\n    const response = await axios.delete(`https://conduit.productionready.io/api/articles/${slug}/favorite`);\n    dispatch(deleteFavorited(response.data.article));\n    dispatch(favoriteSuccess());\n  } catch (err) {\n    console.log(err);\n    dispatch(favoriteFailure());\n  }\n};\n","import React from 'react';\nimport { HeartFilled } from '@ant-design/icons';\nimport { connect } from 'react-redux';\nimport { PropTypes } from 'prop-types';\n\nconst mapStateToProps = (state) => ({\n  favoriteRequestsStatus: state.favoriteRequestsStatus,\n});\n\nconst AnimatedHeart = ({ favoriteRequestsStatus }) => (\n  favoriteRequestsStatus === 'requested'\n  && <HeartFilled style={{ color: 'red' }} className=\"animated\" />\n);\n\nAnimatedHeart.propTypes = {\n  favoriteRequestsStatus: PropTypes.string.isRequired,\n};\n\nexport default connect(mapStateToProps)(AnimatedHeart);\n","/* eslint-disable jsx-a11y/click-events-have-key-events */\n/* eslint-disable jsx-a11y/no-static-element-interactions */\n/* eslint-disable react/forbid-prop-types */\nimport React from 'react';\nimport { Tag, Pagination, Spin } from 'antd';\nimport { HeartFilled } from '@ant-design/icons';\nimport { Link } from 'react-router-dom';\nimport { formatDistance } from 'date-fns';\nimport { connect } from 'react-redux';\nimport shortid from 'shortid';\nimport PropTypes from 'prop-types';\nimport * as actions from '../actions/index';\nimport AnimatedHeart from './AnimatedHeart';\n\nconst mapStateToProps = (state) => ({\n  articles: state.articles,\n  requestStatus: state.requestStatus,\n});\n\nconst actionCreators = {\n  setSlug: actions.setSlug,\n  setLike: actions.setLike,\n  getArticles: actions.getArticles,\n  getPageArticles: actions.getPageArticles,\n  deleteArticle: actions.deleteArticle,\n  fatchFavorite: actions.fatchFavorite,\n  unFavorite: actions.unFavorite,\n  filterByTag: actions.filterByTag,\n};\n\nclass RenderPosts extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      slug: '',\n    };\n  }\n\n  handleLike = (evt) => {\n    const { target } = evt;\n    const title = target.closest('.card__content').firstChild.textContent;\n    this.setState({ slug: title });\n  }\n\n  componentDidMount = () => {\n    const { getArticles, deleteArticle } = this.props;\n    deleteArticle();\n    getArticles();\n  };\n\n  render() {\n    const { slug } = this.state;\n\n    const {\n      articles,\n      getPageArticles,\n      setSlug,\n      requestStatus,\n      fatchFavorite,\n      unFavorite,\n      filterByTag,\n    } = this.props;\n    return (\n      <main className=\"container padding-top margin-bottom\">\n        {requestStatus === 'success' ? (\n          articles.map((item) => (\n            <div key={shortid.generate()} className=\"post-card\">\n              <img className=\"avatar\" alt=\"AVATAR\" src={`${item.author.image}`} />\n              <div className=\"card__content\">\n                <Link\n                  onClick={() => setSlug(item.slug)}\n                  to={`/articles/${item.slug}`}\n                  className=\"title\"\n                >\n                  {item.slug}\n                </Link>\n                <div className=\"meta\">\n                  <span className=\"date\">\n                    {formatDistance(new Date(item.createdAt), Date.now(), { addSuffix: true })}\n                  </span>\n                  <span className=\"author\">{item.author.username}</span>\n                </div>\n                <p>{item.body}</p>\n                <div className=\"links\">\n                  {item.tagList.length\n                    ? item.tagList.map((tag) => (\n                      <Tag key={shortid.generate()} color=\"orangered\" onClick={() => filterByTag(tag)}>\n                        {tag}\n                      </Tag>\n                    ))\n                    : null}\n                  <span className=\"favorites-count\">{item.favoritesCount}</span>\n                  {item.favorited ? (\n                    <span className=\"heart-container\" onClick={this.handleLike}>\n                      <HeartFilled style={{ color: 'red' }} onClick={() => unFavorite(item.slug)} />\n                      {item.slug === slug && <AnimatedHeart />}\n                    </span>\n                  ) : (\n                    <span className=\"heart-container\" onClick={this.handleLike}>\n                      <HeartFilled onClick={() => fatchFavorite(item.slug)} />\n                      {item.slug === slug && <AnimatedHeart />}\n                    </span>\n                  )}\n                </div>\n              </div>\n            </div>\n          ))\n        ) : (\n          <div className=\"max-width margin-bottom\">\n            <Spin className=\"center\" />\n          </div>\n        )}\n        <div className=\"max-width\">\n          <Pagination onChange={getPageArticles} defaultCurrent=\"1\" total=\"500\" />\n        </div>\n      </main>\n    );\n  }\n}\n\nRenderPosts.propTypes = {\n  getArticles: PropTypes.func.isRequired,\n  articles: PropTypes.array,\n  getPageArticles: PropTypes.func.isRequired,\n  setSlug: PropTypes.func.isRequired,\n  deleteArticle: PropTypes.func.isRequired,\n  requestStatus: PropTypes.string.isRequired,\n  fatchFavorite: PropTypes.func.isRequired,\n  unFavorite: PropTypes.func.isRequired,\n  filterByTag: PropTypes.func.isRequired,\n};\n\nRenderPosts.defaultProps = {\n  articles: null,\n};\n\nexport default connect(mapStateToProps, actionCreators)(RenderPosts);\n","/* eslint-disable react/forbid-prop-types */\nimport React from 'react';\nimport { Input, Button, Spin } from 'antd';\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\nimport { Link } from 'react-router-dom';\nimport { useFormik } from 'formik';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport * as Yup from 'yup';\nimport * as actions from '../actions/index';\n\nconst actionCreators = {\n  authenticate: actions.authenticate,\n};\n\nconst mapStateToProps = (state) => ({\n  errorMsg: state.errorMsg,\n  requestStatus: state.requestStatus,\n});\n\nconst Login = (props) => {\n  const loginValidation = Yup.object().shape({\n    email: Yup.string()\n      .email('Укожите корректный email')\n      .required('Обязательное поле'),\n    password: Yup.string()\n      .required('Вы не ввели пароль')\n      .min(8, 'Должно быть не менее 8 символов')\n      .matches(/(?=.*[0-9])/, 'Пароль должень содержать хотя бы одну цифру')\n      .matches(/(?=.*[a-z])/, 'Пароль должень содержать хотя бы одну букву латинского алфавита'),\n  });\n\n  const formik = useFormik({\n    initialValues: {\n      email: '',\n      password: '',\n    },\n    validationSchema: loginValidation,\n    onSubmit: (values) => {\n      const { authenticate } = props;\n      authenticate(values, 'https://conduit.productionready.io/api/users/login');\n    },\n  });\n\n  const {\n    errors, values, touched, handleBlur, handleChange, handleSubmit,\n  } = formik;\n\n  const { errorMsg, requestStatus } = props;\n\n  return (\n    <form className=\"form\" name=\"normal_login\" onSubmit={handleSubmit}>\n      <div className=\"margin-bottom\">\n        <Input\n          name=\"email\"\n          placeholder=\"E-mail\"\n          prefix={<UserOutlined className=\"site-form-item-icon\" />}\n          value={values.email}\n          onChange={handleChange}\n          onBlur={handleBlur}\n        />\n        {errors.email && touched.email && <div className=\"red\">{errors.email}</div>}\n      </div>\n      <div className=\"margin-bottom\">\n        <Input.Password\n          name=\"password\"\n          placeholder=\"Пароль\"\n          prefix={<LockOutlined className=\"site-form-item-icon\" />}\n          value={values.password}\n          onChange={handleChange}\n          onBlur={handleBlur}\n        />\n        {errors.password && touched.password && <div className=\"red\">{errors.password}</div>}\n      </div>\n      {errorMsg && <div className=\"red\">{errorMsg.emailOrPassword}</div>}\n      <Button\n        disabled={requestStatus === 'requested'}\n        htmlType=\"submit\"\n        className=\"margin-right\"\n        type=\"primary\"\n      >\n        Войти\n      </Button>\n      {requestStatus === 'requested' && <Spin className=\"left-margin margin-right\" />}\n      <Link to=\"/signup\">Регистрация</Link>\n    </form>\n  );\n};\n\nLogin.propTypes = {\n  authenticate: PropTypes.func.isRequired,\n  emailOrPassword: PropTypes.string,\n  requestStatus: PropTypes.string.isRequired,\n  errorMsg: PropTypes.object,\n};\n\nLogin.defaultProps = {\n  errorMsg: null,\n  emailOrPassword: '',\n};\n\nexport default connect(mapStateToProps, actionCreators)(Login);\n","import React from 'react';\nimport { useFormik } from 'formik';\nimport { Link } from 'react-router-dom';\nimport { Input, Button, Spin } from 'antd';\nimport { connect } from 'react-redux';\nimport * as actions from '../actions/index';\n\nconst actionCreators = {\n  addUser: actions.addUser,\n};\n\nconst mapStateToProps = (state) => ({\n  errorMsg: state.errorMsg,\n  requestStatus: state.requestStatus,\n});\n\nconst Signup = ({ errorMsg, requestStatus, addUser }) => {\n  const formik = useFormik({\n    initialValues: {\n      username: '',\n      email: '',\n      password: '',\n    },\n    onSubmit: (values) => {\n      addUser(values, 'https://conduit.productionready.io/api/users');\n    },\n  });\n\n  const { values, handleChange, handleSubmit } = formik;\n\n  const renderForm = () => (\n    <form className=\"form\" onSubmit={handleSubmit}>\n      <div className=\"margin-bottom\">\n        <Input\n          name=\"email\"\n          placeholder=\"E-mail\"\n          label=\"E-mail\"\n          type=\"email\"\n          value={values.email}\n          onChange={handleChange}\n        />\n        {errorMsg && <div className=\"red\">{errorMsg.email}</div>}\n      </div>\n      <div className=\"margin-bottom\">\n        <Input.Password\n          name=\"password\"\n          placeholder=\"Пароль\"\n          label=\"Password\"\n          type=\"password\"\n          value={values.password}\n          onChange={handleChange}\n        />\n        {errorMsg && <div className=\"red\">{errorMsg.password}</div>}\n      </div>\n      <div className=\"margin-bottom\">\n        <Input\n          placeholder=\"Имя Пользователя\"\n          name=\"username\"\n          label=\"Nickname\"\n          value={values.username}\n          onChange={handleChange}\n        />\n        {errorMsg && <div className=\"red\">{errorMsg.username}</div>}\n      </div>\n      <Button className=\"left-margin\" type=\"primary\" htmlType=\"submit\">\n        Register\n      </Button>\n      {requestStatus === 'requested' && <Spin className=\"left-margin\" />}\n      <Link to=\"/login\">Войти</Link>\n    </form>\n  );\n\n  return renderForm();\n};\n\nexport default connect(mapStateToProps, actionCreators)(Signup);\n","/* eslint-disable react/forbid-prop-types */\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { formatDistance } from 'date-fns';\nimport { HeartFilled } from '@ant-design/icons';\nimport { Tag, Spin, Button } from 'antd';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport * as actions from '../actions/index';\nimport AnimatedHeart from './AnimatedHeart';\n\nconst actionCreaters = {\n  getTargetArticle: actions.getTargetArticle,\n  deletePost: actions.deletePost,\n  unFavorite: actions.unFavorite,\n  fatchFavorite: actions.fatchFavorite,\n  setPostChangeStatusToNone: actions.setPostChangeStatusToNone,\n};\n\nconst mapStateToProps = (state) => ({\n  article: state.article,\n  slug: state.slug,\n  changePostStatus: state.changePostStatus,\n  requestStatus: state.requestStatus,\n});\n\nclass Post extends React.Component {\n  componentDidMount = () => {\n    const { getTargetArticle, slug } = this.props;\n    return getTargetArticle(`/articles/${slug}`);\n  };\n\n  render() {\n    const {\n      article,\n      changePostStatus,\n      setPostChangeStatusToNone,\n      slug,\n      deletePost,\n      unFavorite,\n      fatchFavorite,\n    } = this.props;\n\n    if (changePostStatus === 'success') {\n      return (\n        <div className=\"container post-card padding-top\">\n          <p className=\"margin-right\">Пост успешно удолен</p>\n          <br />\n          <Link onClick={() => setPostChangeStatusToNone()} to=\"/\">\n            ok\n          </Link>\n        </div>\n      );\n    }\n    return article ? (\n      <main className=\"padding-top\">\n        <div className=\"post-card container\">\n          <img className=\"avatar\" alt=\"AVATAR\" src={`${article.author.image}`} />\n          <div className=\"card__content\">\n            <h1 className=\"title\">{article.title}</h1>\n            <div className=\"meta\">\n              <span className=\"date\">\n                {formatDistance(new Date(article.createdAt), Date.now(), { addSuffix: true })}\n              </span>\n              <span className=\"author\">{article.author.username}</span>\n            </div>\n            <p>{article.body}</p>\n            <div className=\"links\">\n              {article.tagList.length\n                ? article.tagList.map((tag) => <Tag color=\"orangered\">{tag}</Tag>)\n                : null}\n              <span className=\"favorites-count\">{article.favoritesCount}</span>\n              {article.favorited ? (\n                <span className=\"heart-container\">\n                  <HeartFilled style={{ color: 'red' }} onClick={() => unFavorite(article.slug)} className=\"like\" />\n                  <AnimatedHeart />\n                </span>\n              ) : (\n                <span className=\"heart-container\">\n                  <HeartFilled onClick={() => fatchFavorite(article.slug)} className=\"like\" />\n                  <AnimatedHeart />\n                </span>\n              )}\n            </div>\n            {article.author.username === localStorage.getItem('user') && (\n              <div className=\"remove\">\n                <Button\n                  className=\"margin-right\"\n                  disabled={changePostStatus === 'sended'}\n                  onClick={() => deletePost(slug)}\n                  type=\"primary\"\n                  danger\n                >\n                  Удолить\n                </Button>\n                {changePostStatus === 'sended' && <Spin className=\"margin-right\" />}\n                <Button\n                  disabled={changePostStatus === 'sended'}\n                  type=\"primary\"\n                >\n                  <Link to={`/articles/${slug}/edit`}>Изменить</Link>\n                </Button>\n              </div>\n            )}\n          </div>\n        </div>\n      </main>\n    ) : (\n      <div className=\"padding-top max-width margin-bottom\">\n        <Spin className=\"center\" />\n      </div>\n    );\n  }\n}\n\nPost.propTypes = {\n  article: PropTypes.object,\n  changePostStatus: PropTypes.string.isRequired,\n  setPostChangeStatusToNone: PropTypes.func.isRequired,\n  slug: PropTypes.string.isRequired,\n  deletePost: PropTypes.func.isRequired,\n  getTargetArticle: PropTypes.func.isRequired,\n  unFavorite: PropTypes.func.isRequired,\n  fatchFavorite: PropTypes.func.isRequired,\n};\n\nPost.defaultProps = {\n  article: null,\n};\n\nexport default connect(mapStateToProps, actionCreaters)(Post);\n","import React from 'react';\nimport { Avatar } from 'antd';\nimport { Link } from 'react-router-dom';\nimport { UserOutlined } from '@ant-design/icons';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport * as actions from '../actions/index';\n\nconst mapStateToProps = (state) => ({\n  isAuth: state.isAuth,\n});\n\nconst actionCreators = {\n  setAuth: actions.setAuth,\n};\n\nconst Header = ({ setAuth, isAuth }) => {\n  const handleAuth = () => {\n    setAuth(isAuth);\n    localStorage.clear();\n  };\n\n  return (\n    <header>\n      <div className=\"header__wrapper container\">\n        <Link to=\"/\">\n          <h1 className=\"logo\">Blog</h1>\n        </Link>\n        <div className=\"user\">\n          {isAuth && (\n            <Link className=\"user-btn margin-right\" to=\"/add\">\n              Добавить пост\n            </Link>\n          )}\n          <div className=\"user-name\">\n            <Avatar icon={<UserOutlined />} />\n            {isAuth ? (\n              <span className=\"user-nick\">{localStorage.getItem('user')}</span>\n            ) : (\n              <span className=\"user-nick\">Вы не авторизованы</span>\n            )}\n          </div>\n          {isAuth ? (\n            <Link onClick={handleAuth} className=\"user-btn\" to=\"/\">\n              Выйти\n            </Link>\n          ) : (\n            <Link className=\"user-btn\" to=\"/login\">\n              Войти\n            </Link>\n          )}\n        </div>\n      </div>\n    </header>\n  );\n};\n\nHeader.propTypes = {\n  setAuth: PropTypes.func.isRequired,\n  isAuth: PropTypes.bool.isRequired,\n};\n\nexport default connect(mapStateToProps, actionCreators)(Header);\n","import React from 'react';\nimport { MailOutlined } from '@ant-design/icons';\n\nconst Footer = () => (\n  <div className=\"footer\">\n    <p>Desined by Istamal Dagalaev</p>\n    <MailOutlined className=\"m-right-gap\" />\n    <a href=\"mailto:dagalaev@gmail.com\">dagalaev@gmail.com</a>\n  </div>\n);\n\nexport default Footer;\n","import React from 'react';\nimport {\n  Formik, Form, FieldArray, Field,\n} from 'formik';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { Input, Button, Spin } from 'antd';\nimport { connect } from 'react-redux';\nimport * as Yup from 'yup';\nimport * as actions from '../actions/index';\n\nconst mapStateToProps = (state) => ({\n  changePostStatus: state.changePostStatus,\n});\n\nconst actionCreators = {\n  addPost: actions.addPost,\n  setPostChangeStatusToNone: actions.setPostChangeStatusToNone,\n};\n\nconst AddPost = ({ changePostStatus, setPostChangeStatusToNone, addPost }) => {\n  const postValuesValidation = Yup.object().shape({\n    title: Yup.string()\n      .required('Обязательное поле')\n      .min(3, 'Не менее 3 символов'),\n    description: Yup.string()\n      .required('Обязательное поле')\n      .min(10, 'Не менее 10 символов'),\n    body: Yup.string()\n      .required('Обязательное поле')\n      .min(20, 'Не менее 20 символов'),\n  });\n\n  return changePostStatus === 'success' ? (\n    <main className=\"container post-card padding-top\">\n      <p className=\"margin-right\">Пост успешно добавлен</p>\n      <br />\n      <Link onClick={() => setPostChangeStatusToNone()} to=\"/\">\n        ok\n      </Link>\n    </main>\n  ) : (\n    <Formik\n      initialValues={{\n        title: '',\n        description: '',\n        body: '',\n        tagList: [],\n      }}\n      validationSchema={postValuesValidation}\n      onSubmit={(values) => {\n        addPost(values);\n      }}\n      render={({\n        values, handleChange, errors, handleBlur, touched,\n      }) => (\n        <Form className=\"form\">\n          <div className=\"margin-bottom\">\n            <Input\n              placeholder=\"Заголовок\"\n              name=\"title\"\n              value={values.title}\n              onChange={handleChange}\n              onBlur={handleBlur}\n            />\n            {errors.title && touched.title && <div className=\"red s-size\">{errors.title}</div>}\n          </div>\n          <div className=\"margin-bottom\">\n            <Input\n              placeholder=\"Описание\"\n              name=\"description\"\n              value={values.description}\n              onChange={handleChange}\n              onBlur={handleBlur}\n            />\n            {errors.description && touched.description && (\n            <div className=\"red s-size\">{errors.description}</div>\n            )}\n          </div>\n          <div className=\"margin-bottom\">\n            <Input.TextArea\n              placeholder=\"Текст\"\n              name=\"body\"\n              value={values.body}\n              onChange={handleChange}\n              onBlur={handleBlur}\n            />\n            {errors.body && touched.body && <div className=\"red s-size\">{errors.body}</div>}\n          </div>\n          <FieldArray\n            placeholder=\"Метки\"\n            name=\"tagList\"\n            render={(arrayHelpers) => (\n              <div>\n                {values.tagList && values.tagList.length > 0 ? (\n                  values.tagList.map((tag, index) => (\n                    <div key={Math.random(100)}>\n                      <Field\n                        className=\"input margin-bottom m-right-gap\"\n                        name={`tagList.${index}`}\n                      />\n                      <Button\n                        type=\"button\"\n                        className=\"m-right-gap\"\n                        danger\n                        onClick={() => arrayHelpers.remove(index)}\n                      >\n                        -\n                      </Button>\n                      <Button type=\"button\" onClick={() => arrayHelpers.insert(index, '')}>\n                        +\n                      </Button>\n                    </div>\n                  ))\n                ) : (\n                  <Button\n                    className=\"margin-bottom\"\n                    type=\"primary\"\n                    onClick={() => arrayHelpers.push('')}\n                  >\n                    Добавить тег\n                  </Button>\n                )}\n                <div>\n                  <Button\n                    className=\"margin-right\"\n                    disabled={changePostStatus === 'sended'}\n                    type=\"primary\"\n                    htmlType=\"submit\"\n                  >\n                    Отправить\n                  </Button>\n                  {changePostStatus === 'sended' && <Spin className=\"margin-right\" />}\n                </div>\n              </div>\n            )}\n          />\n        </Form>\n      )}\n    />\n  );\n};\n\nAddPost.propTypes = {\n  changePostStatus: PropTypes.string.isRequired,\n  setPostChangeStatusToNone: PropTypes.func.isRequired,\n  addPost: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, actionCreators)(AddPost);\n","/* eslint-disable react/forbid-prop-types */\nimport React from 'react';\nimport {\n  Formik,\n  Form,\n  FieldArray,\n  Field,\n} from 'formik';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { Input, Button, Spin } from 'antd';\nimport { connect } from 'react-redux';\nimport * as Yup from 'yup';\nimport * as actions from '../actions/index';\n\nconst mapStateToProps = (state) => ({\n  changePostStatus: state.changePostStatus,\n  article: state.article,\n  slug: state.slug,\n});\n\nconst actionCreators = {\n  editPost: actions.editPost,\n  setPostChangeStatusToNone: actions.setPostChangeStatusToNone,\n};\n\nconst EditPost = (props) => {\n  const postValuesValidation = Yup.object().shape({\n    title: Yup.string()\n      .required('Обязательное поле')\n      .min(3, 'Не менее 3 символов'),\n    description: Yup.string()\n      .required('Обязательное поле')\n      .min(10, 'Не менее 10 символов'),\n    body: Yup.string()\n      .required('Обязательное поле')\n      .min(20, 'Не менее 20 символов'),\n  });\n\n  const {\n    changePostStatus,\n    setPostChangeStatusToNone,\n    editPost,\n    article,\n    slug,\n  } = props;\n\n  return changePostStatus === 'success' ? (\n    <main className=\"container post-card padding-top\">\n      <p className=\"margin-right\">Изменения добавлены</p>\n      <br />\n      <Link onClick={() => setPostChangeStatusToNone()} to=\"/\">\n        ok\n      </Link>\n    </main>\n  ) : (\n    <Formik\n      initialValues={{\n        title: article.title,\n        description: article.description,\n        body: article.body,\n        tagList: [...article.tagList],\n      }}\n      validationSchema={postValuesValidation}\n      onSubmit={(values) => {\n        editPost(values, slug);\n      }}\n      render={({\n        values,\n        handleChange,\n        errors,\n        handleBlur,\n        touched,\n      }) => (\n        <Form className=\"form\">\n          <div className=\"margin-bottom\">\n            <Input\n              placeholder=\"Заголовок\"\n              name=\"title\"\n              value={values.title}\n              onChange={handleChange}\n              onBlur={handleBlur}\n            />\n            {errors.title && touched.title && <div className=\"red s-size\">{errors.title}</div>}\n          </div>\n          <div className=\"margin-bottom\">\n            <Input\n              placeholder=\"Описание\"\n              name=\"description\"\n              value={values.description}\n              onChange={handleChange}\n              onBlur={handleBlur}\n            />\n            {errors.description && touched.description && (\n            <div className=\"red s-size\">{errors.description}</div>\n            )}\n          </div>\n          <div className=\"margin-bottom\">\n            <Input.TextArea\n              placeholder=\"Текст\"\n              name=\"body\"\n              value={values.body}\n              onChange={handleChange}\n              onBlur={handleBlur}\n            />\n            {errors.body && touched.body && <div className=\"red s-size\">{errors.body}</div>}\n          </div>\n          <div className=\"margin-bottom\">\n            <FieldArray\n              placeholder=\"Метки\"\n              name=\"tagList\"\n              render={(arrayHelpers) => (\n                <div>\n                  {values.tagList && values.tagList.length > 0 ? (\n                    values.tagList.map((tag, index) => (\n                      <div key={Math.random(100)}>\n                        <Field\n                          className=\"input margin-bottom m-right-gap\"\n                          name={`tagList[${index}]`}\n                        />\n                        <Button\n                          type=\"button\"\n                          className=\"m-right-gap\"\n                          danger\n                          onClick={() => arrayHelpers.remove(index)}\n                        >\n                          -\n                        </Button>\n                        <Button type=\"button\" onClick={() => arrayHelpers.insert(index, '')}>\n                          +\n                        </Button>\n                      </div>\n                    ))\n                  ) : (\n                    <Button\n                      className=\"margin-bottom\"\n                      type=\"primary\"\n                      onClick={() => arrayHelpers.push('')}\n                    >\n                      Add a friend\n                    </Button>\n                  )}\n                  <div>\n                    <Button\n                      className=\"margin-right\"\n                      disabled={changePostStatus === 'sended'}\n                      type=\"primary\"\n                      htmlType=\"submit\"\n                    >\n                      Submit\n                    </Button>\n                    {changePostStatus === 'sended' && <Spin className=\"margin-right\" />}\n                  </div>\n                </div>\n              )}\n            />\n          </div>\n        </Form>\n      )}\n    />\n  );\n};\n\nEditPost.propTypes = {\n  changePostStatus: PropTypes.func.isRequired,\n  setPostChangeStatusToNone: PropTypes.func.isRequired,\n  editPost: PropTypes.func.isRequired,\n  article: PropTypes.object,\n  slug: PropTypes.string.isRequired,\n};\n\nEditPost.defaultProps = {\n  article: null,\n};\n\nexport default connect(mapStateToProps, actionCreators)(EditPost);\n","import React from 'react';\nimport './App.scss';\nimport 'antd/dist/antd.css';\nimport { connect } from 'react-redux';\nimport {\n  BrowserRouter as Router, Route, Switch, Redirect,\n} from 'react-router-dom';\n\nimport PropTypes from 'prop-types';\nimport RenderPosts from './components/RenderPosts';\nimport Login from './components/Login';\nimport Signup from './components/Signup';\nimport Post from './components/Post';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport AddPost from './components/AddPost';\nimport * as actions from './actions/index';\nimport EditPost from './components/EditPost';\n\nconst mapStateToProps = (state) => ({\n  isAuth: state.isAuth,\n  slug: state.slug,\n});\n\nconst actionCreators = {\n  authenticateWithToken: actions.authenticateWithToken,\n};\n\nclass App extends React.Component {\n  componentDidMount = () => {\n    const { authenticateWithToken } = this.props;\n    if (localStorage.getItem('token')) {\n      authenticateWithToken();\n    }\n  }\n\n  render() {\n    const { slug, isAuth } = this.props;\n    return (\n      <div className=\"wrapper\">\n        <Router basename=\"/blog\">\n          <Header />\n          <Switch>\n            <Route exact path=\"/\" component={RenderPosts} />\n            <Route exact path={`/articles/${slug}`} component={Post} />\n            <Route path=\"/signup\" component={Signup} />\n            <Route path=\"/login\" render={() => (isAuth ? <Redirect to=\"/\" /> : <Login />)} />\n            <Route\n              path=\"/add\"\n              render={\n                () => (\n                  isAuth\n                    ? <AddPost />\n                    : <Redirect to=\"/Login\" />\n                )\n              }\n            />\n            <Route path={`/articles/${slug}/edit`} component={EditPost} />\n          </Switch>\n          <Footer />\n        </Router>\n      </div>\n    );\n  }\n}\n\nApp.propTypes = {\n  slug: PropTypes.string,\n  isAuth: PropTypes.bool.isRequired,\n  authenticateWithToken: PropTypes.func.isRequired,\n};\n\nApp.defaultProps = {\n  slug: null,\n};\n\nexport default connect(mapStateToProps, actionCreators)(App);\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { combineReducers } from 'redux';\n\nconst requestStatus = (state = 'none', action) => {\n  switch (action.type) {\n    case 'REQUEST_SEND':\n      return 'requested';\n    case 'REQUEST_SUCCESS':\n      return 'success';\n    case 'REQUEST_FAILURE':\n      return 'failure';\n    default:\n      return state;\n  }\n};\n\nconst article = (state = null, action) => {\n  if (action.type === 'SET_ARTICLE') {\n    return action.payload.article;\n  }\n  if (action.type === 'DELETE_ARTICLE') {\n    return null;\n  }\n  if (action.type === 'SET_FAVORITED' || action.type === 'DELETE_FAVORITED') {\n    return action.payload.article;\n  }\n  return state;\n};\n\nconst slug = (state = null, action) => {\n  if (action.type === 'SET_SLUG') {\n    return action.payload.slug;\n  }\n  return state;\n};\n\nconst changePostStatus = (state = 'none', action) => {\n  if (action.type === 'POST_CHANGE_REQUESTED') {\n    return 'sended';\n  }\n  if (action.type === 'POST_CHANGE_SUCCESS') {\n    return 'success';\n  }\n  if (action.type === 'POST_CHANGE_FAILURE') {\n    return 'failure';\n  }\n  if (action.type === 'SET_POSTCHANGE_STATUS_TO_NONE') {\n    return 'none';\n  }\n  return state;\n};\n\nconst isAuth = (state = false, action) => {\n  if (action.type === 'SET_AUTH') {\n    return !action.payload.auth;\n  }\n  return state;\n};\n\nconst favoriteRequestsStatus = (state = 'none', action) => {\n  if (action.type === 'FAVORITE_REQUESTED') {\n    return 'requested';\n  }\n  if (action.type === 'FAVORITE_SUCCESS') {\n    return 'success';\n  }\n  if (action.type === 'FAVORITE_FAILURE') {\n    return 'failure';\n  }\n  return state;\n};\n\nconst articles = (state = [], action) => {\n  if (action.type === 'SET_ARTICLES') {\n    return action.payload.articles;\n  }\n  if (action.type === 'SET_FAVORITED' || action.type === 'DELETE_FAVORITED') {\n    return state.map((item) => {\n      if (item.slug === action.payload.article.slug) {\n        return action.payload.article;\n      }\n      return item;\n    });\n  }\n  if (action.type === 'SET_FILTERED_ARTICLES') {\n    return state.filter((item) => item.tagList.includes(action.payload.tag));\n  }\n  return state;\n};\n\nconst errorMsg = (state = null, action) => {\n  if (action.type === 'ADD_ERROR_MESSAGE') {\n    const { email, username, password } = action.payload.err;\n    return {\n      email,\n      username,\n      password,\n      emailOrPassword: 'Email or password is invalid',\n    };\n  }\n  return state;\n};\n\nexport default combineReducers({\n  requestStatus,\n  articles,\n  article,\n  favoriteRequestsStatus,\n  errorMsg,\n  isAuth,\n  slug,\n  changePostStatus,\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport { createStore, compose, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport rootReducer from './redusers/index';\n\n// eslint-disable-next-line no-underscore-dangle\n// const devTools = window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__();\n\nconst store = createStore(\n  rootReducer,\n  compose(\n    applyMiddleware(thunk),\n  ),\n);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}